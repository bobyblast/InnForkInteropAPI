@inject IStringLocalizer<ProjectPage> L
@page "/pages/ProjectEnv/ProjectPage/"

@using System.ComponentModel;
@using System.Text.Json
@using System.Runtime.ExceptionServices
@using Microsoft.Extensions.DependencyInjection
@using InnFork.Application.Features.Backers.DTOs
@using InnFork.Application.Features.BaseActorModels.DTOs
@using InnFork.Application.Features.Customers.Commands.AddEdit
@using InnFork.Application.Features.Manufacturers.DTOs
@using InnFork.Application.Features.ProductOffers.DTOs
@using InnFork.Application.Features.ProjectCreators.DTOs
@using InnFork.Application.Features.Investors.DTOs
@using InnFork.Application.Features.Projects.DTOs;
@using InnFork.Domain.Entities;
@using InnFork.Domain.Entities.AnemicModels;
@using InnFork.Domain.Entities.AnemicModels.Actors;
@using InnFork.Server.UI.Endpoint
@using InnFork.Server.UI.Pages.Actors.Backers.Personal.SmartContract.Voting
@using InnFork.Server.UI.Pages.Home
@using InnFork.Server.UI.Pages.Home.Components.Common
@using InnFork.Server.UI.Pages.ProjectEnv.ProjectPage.Dialogs
@using InnFork.Server.UI.Pages.ProjectEnv.ProjectPage.Sections
@using InnFork.Server.UI.Pages.ProjectEnv.ProjectPage.Sections.ProductCompaingPanel
@using System.Numerics


@inherits OwningComponentBase

<CascadingValue Value="projectModel">

    

    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.ExtraLarge">

        <MudPaper Elevation="0" Class="mt-6 mb-6 px-4 py-3 d-flex flex-column flex-md-row justify-center gap-4">
            <ProjectMediaComponent projectModel="@projectModel" />
        </MudPaper>


        <MudPaper Elevation="0" Class="py-3 px-3 justify-start ">
            
                <MudText Typo="Typo.h6">@L["Product Candidates"]</MudText>

                <CascadingValue Value="projectModel">
                    <ProductsCandidatesComponent model_manufacturersDtos="@manufacturers" _productOffers="@productOffers" />
                </CascadingValue>     
                
        </MudPaper>    


        <MudPaper Elevation="0" Class="mt-6 mb-6 px-4 py-3 d-flex flex-column flex-md-row justify-center gap-4">

            <MudButton Variant="Variant.Outlined" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="OpenProjectSettingsDialog" StartIcon="@Icons.Material.Filled.Lightbulb">@L["Project Configuration (for Creator)"]</MudButton>

            <MudButton Variant="Variant.Outlined" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="OpenProjectVotingsDialog" StartIcon="@Icons.Material.Filled.Favorite">@L["Votings Subsys (For Backers)"]</MudButton>

            <MudButton Variant="Variant.Outlined" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="OpenManufacturerContractDialog" StartIcon="@Icons.Material.Filled.Build">@L["Manufacturer Contract Management"]</MudButton>

            <MudButton Variant="Variant.Outlined" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="OpenInvestorContractDialog" StartIcon="@Icons.Material.Filled.AttachMoney">@L["Investor Contract Management"]</MudButton>

        </MudPaper>


        <MudGrid Spacing="2" Justify="Justify.Center">

            <CascadingValue Value="projectModel">
                <CascadingValue Value="ActorsModels">

                    <MudItem>
                        <MudPaper Width="580px" Height="650px">
                            <ProjectStatisticComponent />
                        </MudPaper>
                    </MudItem>

                    <MudItem>
                        <MudPaper Elevation="0" Width="450px" Height="650px">
                            <MainStatistic />

                            <MudButton OnClick="ShowNeoProjectData" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Info"
                                       Size="Size.Large" Class="px-6 py-2">@L["ƒанные проекта в Neo N3"]</MudButton>
                        </MudPaper>

                    </MudItem>

                    <MudItem>
                        <MudPaper Width="720px" Height="650px">
                            <VotingComponent />
                        </MudPaper>
                    </MudItem>
                </CascadingValue>
            </CascadingValue>

        </MudGrid>

    </MudContainer>
</CascadingValue>

@inject ISmartContractService _smartContractService
@inject IProjectOfferService _projectOfferService
@inject IProjectService _projectService
@inject IProductOfferService _productOfferService
@inject IProductService _ProductService
@inject IManufacturerService _manufacturerService
@inject IBackerService _backerService
@inject IInvestorService _investorService
@inject IInvestmentOfferService _investmentOfferService

@inject ICurrentUserService _currentUserService
@inject IBaseActorModelService _baseActorModelService

@code
{
    private BigInteger ManufacturerSelectionPositive { get; set; } = BigInteger.Zero;
    private BigInteger ManufacturerSelectionNegative { get; set; } = BigInteger.Zero;
    private BigInteger LaunchApprovalPositive { get; set; } = BigInteger.Zero;
    private BigInteger LaunchApprovalNegative { get; set; } = BigInteger.Zero;
    // Existing code...

    // Add the missing method to resolve the CS0103 error
    private async Task CallVoteProjectLaunch()
    {
        // Implement the logic for handling the vote project launch action
        // For now, you can add a placeholder implementation
        Console.WriteLine("Vote for project launch has been triggered.");
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Inject] protected NavigationManager? NavigationManager { get; set; }

    [Parameter][SupplyParameterFromQuery] public Guid ProjectId { get; set; }

    public ProjectDto? projectModel { get; set; }

    List<ProductOfferDto> productOffers { get; set; }
    List<ManufacturerDto> manufacturers { get; set; }

    List<BackerDto> backers { get; set; }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    BaseActorModelDto BaseActor = new();

    [CascadingParameter] public MainUserData ActorsModels { get; set; } = default!;

    public bool IsSuccessLoaded { get; set; } = false;

    // ‘лаги, чтобы инициализаци€ выполн€лась только один раз
    private bool _parametersInitialized = false;
    private bool _dataLoaded = false;
    protected override async Task OnParametersSetAsync()
    {
        // ≈сли каскадный параметр не установлен, пытаемс€ его загрузить
        if (ActorsModels == null)
        {
            try
            {
                ActorsModels = await _currentUserService.RetrieveActorsModels();
            }
            catch (Exception ex)
            {
                return;
            }
        }

        // ≈сли ActorsModels успешно загружен, инициализируем св€занные данные
        if (!_parametersInitialized && ActorsModels != null)
        {
            _parametersInitialized = true;

            if (ActorsModels.BaseActorModelId != Guid.Empty)
            {
                BaseActor = ActorsModels.BaseActorDtoModel;
            }

            // ѕосле инициализации параметров загружаем данные страницы
            await InitializeDataAsync();
        }
    }

    private async Task InitializeDataAsync()
    {
        // «ащита от повторной загрузки данных
        if (_dataLoaded)
            return;

        // «десь можно выставить IsSuccessLoaded = false, если нужно показать процесс загрузки
        IsSuccessLoaded = false;

        try
        {
            await InitProjectModels();

            // ≈сли все данные успешно загружены, устанавливаем флаг
            _dataLoaded = true;
            IsSuccessLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("ќшибка загрузки данных: " + ex.Message);
            // «десь можно добавить дополнительную обработку ошибки
        }
    }

    // ≈сли нет необходимости раздел€ть логику, можно не использовать OnInitializedAsync,
    // либо оставить дл€ другой инициализации, не завис€щей от параметров.
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // ћожно оставить пустым, если вс€ инициализаци€ перенесена в OnParametersSetAsync
    }
    ////////////////////////////////////////////////////////////////





    protected async Task InitProjectModels()
    {
        if (projectModel != null) return;

        try
        {
            if (ProjectId != Guid.Empty && projectModel == null)
            {
                projectModel = await _projectService.GetProjectByIdAsync(ProjectId);
            }

            if (projectModel != null)
            {
                productOffers = await _productOfferService.GetProductsOffersRelatedToProjectByProjectIdAsync(projectModel.Id);
                manufacturers = await _manufacturerService.GetManufacturersRelatedToProjectByProjectIdAsync(projectModel.Id);
                backers = await _backerService.GetBackersRelatedToProjectByProjectIdAsync(projectModel.Id);
            }
        }

        catch (Exception ex)
        {
            throw new AggregateException(ex);
        }
    }

    // ћетод дл€ отображени€ даты в нужном формате
    private string FormatDate(DateTime dateTime)
    {
        return dateTime.ToString("d MMM");
    }

    public bool _loading, _hidePosition = false;


    private async Task OpenProjectVotingsDialog(MouseEventArgs args)
    {

        var parameters = new DialogParameters
            {

                {nameof(ProjectVotingDialog.ProjectAddress), projectModel.project_NeoN3_MetaData.neoN3_ProjectPackage.ProjectSha256Id },
            };


        // «десь можно передать параметры в диалог

        var dialog = DialogService.Show<ProjectVotingDialog>(@L["Votings Settings"], parameters, new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge });

        await dialog.Result.ContinueWith(task =>
    {
        if (!task.IsCanceled)
        {
            // ќбработка отмены диалога
        }
    });


    }


    private async Task OpenProjectSettingsDialog(MouseEventArgs args)
    {
        //ProjectSettingsDialog

        var parameters = new DialogParameters
        {
            // «десь можно передать параметры в диалог
        };
        var dialog = DialogService.Show<ProjectSettingsDialogNew>(@L["Project Settings"], parameters, new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge });

        await dialog.Result.ContinueWith(task =>
        {
            if (!task.IsCanceled)
            {
                // ќбработка отмены диалога
            }
        });
    }

    private async Task ShowNeoProjectData(MouseEventArgs args)
    {
        if (projectModel?.project_NeoN3_MetaData == null) return;

        DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogParameters parameters = new DialogParameters();

        parameters.Add("ProjectMetaData", projectModel.project_NeoN3_MetaData);

        var dialog = await DialogService.ShowAsync<NeoN3ProjectMetadataDialog>(@L["Offer in Neo N3"], parameters, options);

        var DialogResult = await dialog.Result;
    }
    private void SelectedVoteTypeLaunch()
    {

    }
    private void OpenManufacturerContractDialog(MouseEventArgs args)
    {


        var parameters = new DialogParameters
        {
            { nameof(ManufacturerContractDialog.ProjectId), projectModel.Id.ToString() },
            { nameof(ManufacturerContractDialog.ManufacturerId), projectModel.Id.ToString() },
            { nameof(ManufacturerContractDialog.ManufacturerAddress), projectModel.Id.ToString() }

        };
        var dialog = DialogService.Show<ManufacturerContractDialog>(@L["Manufacturer Contract"], parameters, new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge });
        dialog.Result.ContinueWith(task =>
        {
            if (!task.IsCanceled)
            {
                // ќбработка отмены диалога
            }
        });

    }

    private void OpenInvestorContractDialog(MouseEventArgs args)
    {


        var parameters = new DialogParameters
        {

        };
        var dialog = DialogService.Show<InvestorContractDialog>(@L["Investor Contract"], parameters, new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge });
        dialog.Result.ContinueWith(task =>
        {
            if (!task.IsCanceled)
            {
                // ќбработка отмены диалога
            }
        });

    }

}

@* 

# **–уководство ѕользовател€ ѕлатформы InnFork**

## **1. ¬ведение в ѕлатформу InnFork**
    1.1. „то такое InnFork?
        1.1.1. ѕлатформа дл€ коллективного финансировани€ и реализации идей.
        1.1.2. ќбъединение авторов, спонсоров, исполнителей и инвесторов.
    1.2.  лючевые ”частники ѕлатформы:
        1.2.1. —оздатель ѕроекта (јвтор »деи)
        1.2.2. Ѕэкер (—понсор)
        1.2.3. ѕроизводитель (»сполнитель)
        1.2.4. »нвестор
    1.3. ќсновные ¬озможности ѕлатформы.

## **2. ƒл€ —оздателей ѕроектов (јвторов »дей)**
    2.1. ”правление јккаунтом —оздател€:
        2.1.1. –егистраци€ и настройка профил€.
        2.1.2. ”правление балансом и публичным ключом.
    2.2. ѕредложение ѕроекта (»де€):
        2.2.1. —оздание и публикаци€ "ѕредложени€ ѕроекта" (описание идеи).
        2.2.2. ѕолучение первоначальной поддержки (донатов) на "ѕредложение".
        2.2.3. –едактирование и удаление "ѕредложени€".
    2.3. «апуск ѕолноценного ѕроекта:
        2.3.1. –егистраци€ "ѕроекта" на основе успешного "ѕредложени€".
        2.3.2. ƒетальное описание "ѕроекта", загрузка сопутствующих материалов.
        2.3.3. ќпределение финансовых целей (обща€ сумма сбора, призовой фонд).
        2.3.4. Ќастройка правил и параметров "ѕроекта" (сроки, тип финансировани€, правила голосовани€).
    2.4. ¬ознаграждение —оздател€:
        2.4.1. ѕолучение комиссии или фиксированного вознаграждени€ за успешную реализацию "ѕроекта".

## **3. ƒл€ Ѕэкеров (—понсоров)**
    3.1. ”правление јккаунтом Ѕэкера:
        3.1.1. –егистраци€ и настройка профил€.
        3.1.2. ”правление балансом и публичным ключом.
    3.2. ѕоддержка »дей и ѕроектов:
        3.2.1. ѕоиск и просмотр "ѕредложений ѕроектов" и активных "ѕроектов".
        3.2.2. ‘инансова€ поддержка "ѕредложений ѕроекта" (донаты).
        3.2.3. ¬несение средств в "ѕроекты":
            3.2.3.1. ¬ общий призовой фонд "ѕроекта".
            3.2.3.2. –езервирование средств дл€ конкретного ѕроизводител€-кандидата в "ѕроекте".
    3.3. ”частие в ∆изни ѕроекта:
        3.3.1. √олосование по ключевым решени€м "ѕроекта" (запуск, выбор исполнител€, завершение этапов и т.д.).
        3.3.2. Ќастройка автоматического голосовани€ или автоматического согласи€ на определенные действи€.
    3.4. ‘инансовые ќперации:
        3.4.1. ¬озможность возврата вложенных средств (при определенных услови€х, например, отмена "ѕроекта").
        3.4.2. ”правление распределением своих средств в "ѕроекте".

## **4. ƒл€ ѕроизводителей (»сполнителей)**
    4.1. ”правление јккаунтом ѕроизводител€:
        4.1.1. –егистраци€ и настройка профил€ (включа€ публичный ключ).
        4.1.2. ”правление балансом.
        4.1.3. ‘ормирование репутации на платформе.
    4.2. ”частие в ѕроектах:
        4.2.1. ѕодача за€вки на роль исполнител€ (кандидата) в активном "ѕроекте".
        4.2.2. ѕредставление своего продукта или плана работ.
    4.3. –еализаци€ ѕроекта:
        4.3.1. ¬ случае выбора Ѕэкерами Ц получение статуса исполнител€ "ѕроекта".
        4.3.2. ќпределение и управление этапами (milestones) выполнени€ работ.
        4.3.3. «апрос финансировани€ на каждый этап.
        4.3.4. ѕолучение средств на выполнение этапов по результатам голосовани€ Ѕэкеров.
    4.4. ¬заимодействие с »нвесторами:
        4.4.1. ѕривлечение пр€мых инвестиций от »нвесторов ѕлатформы.
        4.4.2. «аключение "—оглашений об инвестировании".
        4.4.3. ѕолучение инвестиционных средств и выплата доли прибыли »нвесторам.
    4.5. ‘инансовые ќперации:
        4.5.1. ¬ывод заработанных средств.

## **5. ƒл€ »нвесторов**
    5.1. ”правление јккаунтом »нвестора:
        5.1.1. –егистраци€ и настройка профил€.
        5.1.2. ”правление балансом и публичным ключом.
    5.2. »нвестиционна€ ƒе€тельность:
        5.2.1. ѕоиск ѕроизводителей и проектов дл€ инвестировани€.
        5.2.2. јнализ предложений ѕроизводителей.
    5.3. —оглашени€ и ‘инансирование:
        5.3.1. —оздание и подтверждение "—оглашений об инвестировании" с ѕроизводител€ми.
        5.3.2. ѕеречисление инвестиционных средств ѕроизводителю согласно "—оглашению".
    5.4. ѕолучение ƒохода:
        5.4.1. ѕолучение доли прибыли от ѕроизводител€ в соответствии с услови€ми "—оглашени€".
        5.4.2. ¬ывод инвестированных средств и полученной прибыли.

## **6. ѕроекты на ѕлатформе InnFork**
    6.1. ∆изненный ÷икл ѕроекта:
        6.1.1. ќт "ѕредложени€" к активному "ѕроекту".
        6.1.2. —татусы: ѕредложен, —бор —редств, ¬ыбор ѕроизводител€, ѕроизводство, Ќа ѕаузе, ”спешно «авершен, ќтменен.
    6.2. ‘инансирование ѕроектов:
        6.2.1. ћеханизмы сбора средств (например, "все или ничего", гибкое финансирование).
        6.2.2. ‘ормирование и использование призового фонда "ѕроекта".
        6.2.3. –аспределение средств между ѕроизводител€ми и призовым фондом.
    6.3. ¬ыбор »сполнител€ (ѕроизводител€):
        6.3.1. ѕериод выдвижени€ кандидатур ѕроизводителей.
        6.3.2. √олосование Ѕэкеров за выбор основного ѕроизводител€ "ѕроекта".
    6.4. –еализаци€ и Ётапы (Milestones):
        6.4.1. –азделение работы ѕроизводител€ на этапы.
        6.4.2. «апрос и утверждение финансировани€ дл€ каждого этапа Ѕэкерами.
    6.5. —истема √олосовани€ в ѕроектах:
        6.5.1.  лючевые вопросы, выносимые на голосование:
            6.5.1.1. ќфициальный запуск "ѕроекта".
            6.5.1.2. ѕодтверждение успешного сбора средств.
            6.5.1.3. ¬ыбор ѕроизводител€-победител€.
            6.5.1.4. ”тверждение выполнени€ и финансировани€ этапов ѕроизводител€.
            6.5.1.5. ¬несение изменений в параметры "ѕроекта".
            6.5.1.6. ѕриостановка или возобновление "ѕроекта".
            6.5.1.7. ƒосрочное завершение или отмена "ѕроекта" с возвратом средств.
        6.5.2. ѕринципы голосовани€:
            6.5.2.1. ¬ес голоса Ѕэкера (может зависеть от суммы вклада).
            6.5.2.2. Ќеобходимый процент участи€ и процент одобрени€ дл€ прин€ти€ решени€.
            6.5.2.3. ¬озможность воздержатьс€ от голосовани€.
    6.6. јвтоматизаци€ и ”правление:
        6.6.1. јвтоматическое завершение голосований по истечении срока.
        6.6.2. јвтоматическа€ приостановка "ѕроекта" при определенных услови€х (например, длительное отсутствие активности).
        6.6.3. ¬озможность передачи управлени€ "ѕроектом" администрации платформы (при голосовании Ѕэкеров).
    6.7. Ѕезопасность и –азрешение —поров:
        6.7.1. ћеханизмы вы€влени€ мошенничества.
        6.7.2. ¬озможность блокировки недобросовестных участников.
        6.7.3. —истема дл€ инициации и разрешени€ споров между участниками "ѕроекта".

## **7. ќбщие ‘ункции и ¬озможности ѕлатформы**
    7.1. ”правление ѕользовательскими Ѕалансами:
        7.1.1. ѕополнение счета и вывод средств.
        7.1.2. ѕросмотр истории транзакций.
    7.2. ѕрозрачность и »нформаци€:
        7.2.1. ѕубличный доступ к информации об активных "ѕредложени€х" и "ѕроектах".
        7.2.2. —татистика по "ѕроектам" и голосовани€м.
    7.3. —истема ”ведомлений (ќбзор):
        7.3.1. »нформирование участников о важных событи€х в "ѕроектах" и голосовани€х.
 *@
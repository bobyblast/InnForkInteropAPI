@inject IStringLocalizer<CreateProductOfferDialog> L
@using System.Net
@using System.Text
@using InnFork.Application.Features.BaseActorModels.DTOs
@using InnFork.Application.Features.ProductOffers.DTOs

<MudContainer MaxWidth="MaxWidth.Medium">

    <MudDialog>
        <DialogContent>
            <MudContainer Style="max-height: 60vh; overflow-y: auto; padding: 16px">
                @if (!IsSuccessLoaded)
                {
                    <MudGrid Justify="Justify.Center" Style="height: 300px">
                        <MudItem>
                            <MudProgressCircular Size="Size.Medium" StrokeWidth="5" Color="Color.Primary" Indeterminate="true" />
                        </MudItem>
                    </MudGrid>
                }
                else
                {

                    <MudGrid Spacing="4">
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4">@Model.ManufacturerName</MudText>
                            <MudDivider Class="mb-4" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="Model.ProductName" Label="@L["Product Name"]" Variant="Variant.Outlined" Required="true" Clearable="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="Model.ProductPrice" Label="@L["Price"]" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Adornment="Adornment.End" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.ProductDescription" Label="@L["Description"]" Variant="Variant.Outlined" Lines="3" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudDatePicker Label="@L["Delivery Date"]" @bind-Value="Model.DeliveryDate" Variant="Variant.Outlined" Editable="true" Clearable="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudDatePicker Label="@L["Proposal Date"]" @bind-Value="Model.ProposalDate" Variant="Variant.Outlined" Editable="true" Clearable="true" />
                        </MudItem>

                        <MudItem xs="12" sm="4">
                            <MudSelect @bind-Value="Model.PaymentTerms" Label="@L["Payment Terms"]" Variant="Variant.Outlined"
                            AnchorOrigin="Origin.BottomCenter" Clearable="true"/>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudSelect @bind-Value="Model.WarrantyTerms" Label="@L["Warranty"]" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="Model.ShippingTerms" Label="@L["Shipping"]" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.LocalShipping" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.AdditionalTerms" Label="@L["Additional Terms"]" Variant="Variant.Outlined" Lines="2"  />
                        </MudItem>

                        <MudItem xs="12">
                            @*        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Label="Upload Proposal Document"
                                       @bind-Files="Model.ProposalDocument" Variant="Variant.Outlined"
                                       Icon="@Icons.Material.Filled.UploadFile" /> *@


                            <MudFileUpload T="IBrowserFile" Accept=".pdf" FilesChanged="UploadProposalDocument" Style="margin-top:-10px;margin-left:-15px">
                                <ActivatorContent>
                                    <MudIconButton HtmlTag="label"
                                    Icon="@Icons.Material.Filled.UploadFile">
                                    </MudIconButton>
                                </ActivatorContent>
                            </MudFileUpload>

                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.ExpectedOutcomesBenefits" Label="@L["Expected Benefits"]" Variant="Variant.Outlined" Lines="3" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Class="mb-2">Technical Specifications</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudChipSet T="string" @bind-SelectedChips="Model.ProductCategories" Label="true" Variant="Variant.Outlined" SelectionMode="SelectionMode.MultiSelection" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudButtonGroup Variant="Variant.Outlined" FullWidth="true" Class="mt-4">
                                <MudButton Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Check" OnClick="Ok">Submit</MudButton>
                                <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="Cancel">@L["Cancel"]</MudButton>
                            </MudButtonGroup>
                        </MudItem>
                    </MudGrid>
                }
            </MudContainer>
        </DialogContent>
    </MudDialog>
</MudContainer>

@inject ICurrentUserService _currentUserService

@code
{




        // —охран€ем все существующие прив€зки модели
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }


    private List<string> Tags = new() { "IoT", "Cloud", "AI", "Security" };
    private string SelectedTag { get; set; }

    void AddTag(string tag)
    {
        if (!string.IsNullOrEmpty(tag)
        && !Model.ProductTags.Contains(tag))
        {
            Model.ProductTags.Add(tag);
        }
        SelectedTag = string.Empty;
    }

    void Cancel() => MudDialog.Cancel();

    [Parameter] public ProductOfferDto Model { get; set; } = default;


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    BaseActorModelDto BaseActor = new();

    [CascadingParameter] public MainUserData ActorsModels { get; set; } = default!;

    public bool IsSuccessLoaded { get; set; } = false;

    // ‘лаги, чтобы инициализаци€ выполн€лась только один раз
    private bool _parametersInitialized = false;
    private bool _dataLoaded = false;
    protected override async Task OnParametersSetAsync()
    {
        // ≈сли каскадный параметр не установлен, пытаемс€ его загрузить
        if (ActorsModels == null)
        {
            try
            {
                ActorsModels = await _currentUserService.RetrieveActorsModels();
            }
            catch (Exception ex)
            {
                return;
            }
        }

        // ≈сли ActorsModels успешно загружен, инициализируем св€занные данные
        if (!_parametersInitialized && ActorsModels != null)
        {
            _parametersInitialized = true;

            if (ActorsModels.BaseActorModelId != Guid.Empty)
            {
                BaseActor = ActorsModels.BaseActorDtoModel;
            }

            // ѕосле инициализации параметров загружаем данные страницы
            await InitializeDataAsync();
        }
    }

    private async Task InitializeDataAsync()
    {
        // «ащита от повторной загрузки данных
        if (_dataLoaded)
            return;

        // «десь можно выставить IsSuccessLoaded = false, если нужно показать процесс загрузки
        IsSuccessLoaded = false;

        try
        {

            // ≈сли все данные успешно загружены, устанавливаем флаг
            _dataLoaded = true;
            IsSuccessLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("ќшибка загрузки данных: " + ex.Message);
            // «десь можно добавить дополнительную обработку ошибки
        }
    }

    // ≈сли нет необходимости раздел€ть логику, можно не использовать OnInitializedAsync,
    // либо оставить дл€ другой инициализации, не завис€щей от параметров.
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // ћожно оставить пустым, если вс€ инициализаци€ перенесена в OnParametersSetAsync
    }
    ////////////////////////////////////////////////////////////////


    private string LicenseText;


    private void Ok()
    {
        MudDialog.Close(DialogResult.Ok(Model)); // Pass the Model as the result
    }

   

    private void UploadProposalDocument(IBrowserFile file)
    {
   @*      var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgstream))
            {
                image.Mutate(i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(128, 128) }));
                image.Save(outStream, PngFormat.Instance);
                var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ".png", UploadType.ProfilePicture, outStream.ToArray()));
                model.ProfilePictureDataUrl = result;
                var user = await UserManager.FindByIdAsync(model.UserId.ToString());
                user!.ProfilePictureDataUrl = model.ProfilePictureDataUrl;
                await UserManager.UpdateAsync(user);
                Snackbar.Add(L["The avatar has been updated"], Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction { UserProfile = Mapper.Map<UserProfile>(model) });
            }
        } *@
    }
}
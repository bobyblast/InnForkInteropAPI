// <auto-generated>
//     This file introduces a domain-driven aggregator facade for Neo N3 smart contract wrappers.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Numerics;
using InnFork.Blockchain.NEO3;
using InnFork.NeoN3;
using Neo;
using Neo.SmartContract;
using Neo.VM.Types;

using AiModeratorContract = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.AiModeratorContract;
using InfrastructureContract = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Infrastructure;
using InvestingContract = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.InvestingContract;
using Logic1 = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Logic1;
using Logic2 = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Logic2;
using Logic3 = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Logic3;
using Logic4 = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Logic4;
using Logic5 = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.SCPlatform_Logic5;
using ProductShopContract = InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers.InnFork_SCPlatform.IF_NeoFS_ProductShop;

namespace InnForkInteropAPI.BlockChain.NeoN3.SC_Wrappers;

/// <summary>
/// Provides a domain-driven design (DDD) oriented facade over the InnFork smart-contract platform wrappers.
/// The facade exposes bounded contexts that align with the ubiquitous language of the crowdfunding ecosystem
/// (projects, governance, disputes, finance, infrastructure, marketplace, and moderation) while reusing the
/// underlying static wrapper methods as the single source of truth.
/// </summary>
public static class InnFork_DDD_Wrapper
{
    /// <summary>
    /// Encapsulates commands and queries that manage the lifecycle of crowdfunding projects and their milestones.
    /// </summary>
    public static class ProjectLifecycle
    {
        /// <summary>
        /// Provides milestone progression and verification workflows.
        /// </summary>
        public static class Milestones
        {
            /// <summary>
            /// Automatically progresses a project's milestone when all preconditions are met.
            /// Delegates to <see cref="Logic1.autoProgressMilestones(string)"/>.
            /// </summary>
            public static void AutoProgress(string projectId) => Logic1.autoProgressMilestones(projectId);

            /// <summary>
            /// Reverts milestone state when a dispute resolution requires rolling back.
            /// Delegates to <see cref="Logic1.autoRollbackOnDisputeResolution(string, string, UInt160, byte)"/>.
            /// </summary>
            public static void AutoRollbackAfterDispute(string projectId, string disputeId, UInt160 manufacturerAddress, byte stepNumber) =>
                Logic1.autoRollbackOnDisputeResolution(projectId, disputeId, manufacturerAddress, stepNumber);

            /// <summary>
            /// Starts the next milestone automatically once the previous one is completed.
            /// Delegates to <see cref="Logic1.autoStartNextMilestone(string, UInt160, byte)"/>.
            /// </summary>
            public static void AutoStartNext(string projectId, UInt160 manufacturer, byte stepNumber) =>
                Logic1.autoStartNextMilestone(projectId, manufacturer, stepNumber);

            /// <summary>
            /// Checks and rolls back milestones that passed their deadlines without completion.
            /// Delegates to <see cref="Logic1.checkAndRollbackExpiredMilestones(string)"/>.
            /// </summary>
            public static void CheckAndRollbackExpired(string projectId) => Logic1.checkAndRollbackExpiredMilestones(projectId);

            /// <summary>
            /// Validates whether a milestone has expired.
            /// Delegates to <see cref="Logic1.checkMilestoneExpired(string, UInt160, byte)"/>.
            /// </summary>
            public static bool IsExpired(string projectId, UInt160 manufacturer, byte milestoneStep) =>
                Logic1.checkMilestoneExpired(projectId, manufacturer, milestoneStep);

            /// <summary>
            /// Submits a milestone request from a manufacturer to the project governance workflow.
            /// Delegates to <see cref="Logic1.createMilestoneRequest(string, UInt160, byte, string, string, BigInteger, ulong, ulong, BigInteger)"/>.
            /// </summary>
            public static void CreateRequest(
                string projectId,
                UInt160 manufacturer,
                byte stepNumber,
                string name,
                string description,
                BigInteger requestedAmount,
                ulong deadline,
                ulong votingDuration,
                BigInteger minimumVotes) =>
                Logic1.createMilestoneRequest(projectId, manufacturer, stepNumber, name, description, requestedAmount, deadline, votingDuration, minimumVotes);

            /// <summary>
            /// Requests milestone completion verification from validators.
            /// Delegates to <see cref="Logic1.requestMilestoneCompletion(UInt160, string, byte, string, byte[])"/>.
            /// </summary>
            public static void RequestCompletion(UInt160 manufacturerAddress, string projectId, byte stepNumber, string completionProof, byte[] verificationData) =>
                Logic1.requestMilestoneCompletion(manufacturerAddress, projectId, stepNumber, completionProof, verificationData);

            /// <summary>
            /// Requires or removes milestone verification for a given milestone identifier.
            /// Delegates to <see cref="Logic1.requireMilestoneVerification(string, string, bool)"/>.
            /// </summary>
            public static void SetVerificationRequirement(string projectId, string milestoneId, bool required) =>
                Logic1.requireMilestoneVerification(projectId, milestoneId, required);

            /// <summary>
            /// Persists milestone verification decisions from community validators.
            /// Delegates to <see cref="Logic1.submitMilestoneVerification(UInt160, string, UInt160, byte, bool, string)"/>.
            /// </summary>
            public static void SubmitVerification(
                UInt160 validatorAddress,
                string projectId,
                UInt160 manufacturerAddress,
                byte stepNumber,
                bool isVerified,
                string verificationReport) =>
                Logic1.submitMilestoneVerification(validatorAddress, projectId, manufacturerAddress, stepNumber, isVerified, verificationReport);

            /// <summary>
            /// Updates milestone verification status when an oracle finalizes the decision.
            /// Delegates to <see cref="Logic1.verifyMilestone(string, string, bool)"/>.
            /// </summary>
            public static void Verify(string projectId, string milestoneId, bool verified) =>
                Logic1.verifyMilestone(projectId, milestoneId, verified);

            /// <summary>
            /// Evaluates whether the engine should start the next milestone automatically.
            /// Delegates to <see cref="Logic1.shouldAutoStartNextMilestone(string, UInt160, byte)"/>.
            /// </summary>
            public static bool ShouldAutoStartNext(string projectId, UInt160 manufacturer, byte stepNumber) =>
                Logic1.shouldAutoStartNextMilestone(projectId, manufacturer, stepNumber);

            /// <summary>
            /// Retrieves the latest milestone reached by a manufacturer.
            /// Delegates to <see cref="Logic1.getLatestMilestoneStepByManufacturer(string, UInt160)"/>.
            /// </summary>
            public static byte GetLatestStep(string projectId, UInt160 manufacturer) =>
                Logic1.getLatestMilestoneStepByManufacturer(projectId, manufacturer);

            /// <summary>
            /// Retrieves the current milestone completion voting status.
            /// Delegates to <see cref="Logic1.getMilestoneCompletionVotingStatus(string, UInt160, byte)"/>.
            /// </summary>
            public static bool GetMilestoneCompletionVotingStatus(string projectId, UInt160 manufacturerAddress, byte milestoneStep) =>
                Logic1.getMilestoneCompletionVotingStatus(projectId, manufacturerAddress, milestoneStep);

            /// <summary>
            /// Clears milestone fraud flags for a candidate.
            /// Delegates to <see cref="Logic4.ClearMilestoneFraudFlags(string, UInt160, byte)"/>.
            /// </summary>
            public static void ClearMilestoneFraudFlags(string projectId, UInt160 manufacturerCandidate, byte stepNumber) =>
                Logic4.ClearMilestoneFraudFlags(projectId, manufacturerCandidate, stepNumber);

            /// <summary>
            /// Clears milestone template parameters.
            /// Delegates to <see cref="Logic4.ClearMilestoneTemplateParams(string, string)"/>.
            /// </summary>
            public static void ClearMilestoneTemplateParams(string projectId, string templateId) =>
                Logic4.ClearMilestoneTemplateParams(projectId, templateId);

            /// <summary>
            /// Clears milestone votes for a candidate.
            /// Delegates to <see cref="Logic4.ClearMilestoneVotes(string, UInt160, byte)"/>.
            /// </summary>
            public static void ClearMilestoneVotes(string projectId, UInt160 manufacturerCandidate, byte stepNumber) =>
                Logic4.ClearMilestoneVotes(projectId, manufacturerCandidate, stepNumber);

            /// <summary>
            /// Retrieves a backer's milestone vote.
            /// Delegates to <see cref="Logic4.GetMilestoneBackerVote(string, UInt160, UInt160, byte)"/>.
            /// </summary>
            public static BackerVotesEnum GetMilestoneBackerVote(string projectId, UInt160 manufacturerCandidate, UInt160 backer, byte stepNumber) =>
                Logic4.GetMilestoneBackerVote(projectId, manufacturerCandidate, backer, stepNumber);

            /// <summary>
            /// Retrieves milestone fraud flag state.
            /// Delegates to <see cref="Logic4.GetMilestoneFraudFlag(string, UInt160, UInt160, byte)"/>.
            /// </summary>
            public static bool GetMilestoneFraudFlag(string projectId, UInt160 manufacturerCandidate, UInt160 backer, byte stepNumber) =>
                Logic4.GetMilestoneFraudFlag(projectId, manufacturerCandidate, backer, stepNumber);

            /// <summary>
            /// Retrieves a milestone template parameter.
            /// Delegates to <see cref="Logic4.GetMilestoneTemplateParam(string, string, string)"/>.
            /// </summary>
            public static string GetMilestoneTemplateParam(string projectId, string templateId, string key) =>
                Logic4.GetMilestoneTemplateParam(projectId, templateId, key);

            /// <summary>
            /// Removes a stored milestone backer vote.
            /// Delegates to <see cref="Logic4.RemoveMilestoneBackerVote(string, UInt160, UInt160, byte)"/>.
            /// </summary>
            public static void RemoveMilestoneBackerVote(string projectId, UInt160 manufacturerCandidate, UInt160 backer, byte stepNumber) =>
                Logic4.RemoveMilestoneBackerVote(projectId, manufacturerCandidate, backer, stepNumber);

            /// <summary>
            /// Removes a milestone template parameter.
            /// Delegates to <see cref="Logic4.RemoveMilestoneTemplateParam(string, string, string)"/>.
            /// </summary>
            public static void RemoveMilestoneTemplateParam(string projectId, string templateId, string key) =>
                Logic4.RemoveMilestoneTemplateParam(projectId, templateId, key);

            /// <summary>
            /// Records a milestone backer vote.
            /// Delegates to <see cref="Logic4.SetMilestoneBackerVote(string, UInt160, UInt160, BackerVotesEnum, byte)"/>.
            /// </summary>
            public static void SetMilestoneBackerVote(string projectId, UInt160 backer, UInt160 manufacturerCandidate, BackerVotesEnum vote, byte stepNumber) =>
                Logic4.SetMilestoneBackerVote(projectId, backer, manufacturerCandidate, vote, stepNumber);

            /// <summary>
            /// Sets a milestone fraud flag for a backer.
            /// Delegates to <see cref="Logic4.SetMilestoneFraudFlag(string, UInt160, UInt160, bool, byte)"/>.
            /// </summary>
            public static void SetMilestoneFraudFlag(string projectId, UInt160 manufacturerCandidate, UInt160 backer, bool detected, byte stepNumber) =>
                Logic4.SetMilestoneFraudFlag(projectId, manufacturerCandidate, backer, detected, stepNumber);

            /// <summary>
            /// Sets a milestone template parameter.
            /// Delegates to <see cref="Logic4.SetMilestoneTemplateParam(string, string, string, string)"/>.
            /// </summary>
            public static void SetMilestoneTemplateParam(string projectId, string templateId, string key, string value) =>
                Logic4.SetMilestoneTemplateParam(projectId, templateId, key, value);
        }

        /// <summary>
        /// Provides access to reusable milestone templates tailored for different development phases.
        /// </summary>
        public static class Templates
        {
            /// <summary>
            /// Creates a default milestone template for a project step.
            /// Delegates to <see cref="Logic1.createDefaultTemplate(byte, IF_MainGateway.ProjectAccount)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate CreateDefault(byte stepNumber, IF_MainGateway.ProjectAccount project) =>
                Logic1.createDefaultTemplate(stepNumber, project);

            /// <summary>
            /// Creates a research-focused milestone template.
            /// Delegates to <see cref="Logic1.createResearchTemplate(byte)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate CreateResearch(byte stepNumber) => Logic1.createResearchTemplate(stepNumber);

            /// <summary>
            /// Creates a development milestone template.
            /// Delegates to <see cref="Logic1.createDevelopmentTemplate(byte)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate CreateDevelopment(byte stepNumber) => Logic1.createDevelopmentTemplate(stepNumber);

            /// <summary>
            /// Creates a manufacturing milestone template.
            /// Delegates to <see cref="Logic1.createManufacturingTemplate(byte)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate CreateManufacturing(byte stepNumber) => Logic1.createManufacturingTemplate(stepNumber);

            /// <summary>
            /// Creates a testing milestone template.
            /// Delegates to <see cref="Logic1.createTestingTemplate(byte)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate CreateTesting(byte stepNumber) => Logic1.createTestingTemplate(stepNumber);

            /// <summary>
            /// Retrieves a milestone template for a given manufacturer and project.
            /// Delegates to <see cref="Logic1.getMilestoneTemplate(IF_MainGateway.ProjectAccount, UInt160, byte, string)"/>.
            /// </summary>
            public static IF_MainGateway.MilestoneTemplate GetTemplate(
                IF_MainGateway.ProjectAccount project,
                UInt160 manufacturer,
                byte stepNumber,
                string templateType = "default") =>
                Logic1.getMilestoneTemplate(project, manufacturer, stepNumber, templateType);
        }

        /// <summary>
        /// Maintains high-level project workflow decisions such as archiving, activation, and open status checks.
        /// </summary>
        public static class Workflow
        {
            /// <summary>
            /// Archives a project once it leaves the active lifecycle.
            /// Delegates to <see cref="Logic4.archiveProject(string)"/>.
            /// </summary>
            public static void Archive(string projectId) => Logic4.archiveProject(projectId);

            /// <summary>
            /// Evaluates whether a project remains open for interactions.
            /// Delegates to <see cref="Logic1.isProjectOpen(string)"/>.
            /// </summary>
            public static bool IsOpen(string projectId) => Logic1.isProjectOpen(projectId);

            /// <summary>
            /// Updates project activity scoring metrics for monitoring dashboards.
            /// Delegates to <see cref="Logic4.updateProjectActivityScore(string)"/>.
            /// </summary>
            public static void RefreshActivityScore(string projectId) => Logic4.updateProjectActivityScore(projectId);

            /// <summary>
            /// Automatically pauses project operations when infrastructure rules demand it.
            /// Delegates to <see cref="InfrastructureContract.autoSetToPause(string)"/>.
            /// </summary>
            public static void AutoPause(string projectId) => InfrastructureContract.autoSetToPause(projectId);
        }

        /// <summary>
        /// Manages project participant lifecycle such as manufacturer candidates.
        /// </summary>
        public static class Participants
        {
            /// <summary>
            /// Removes a manufacturer candidate from a specific project.
            /// Delegates to <see cref="Logic1.removeManufacturerCandidate(string, UInt160)"/>.
            /// </summary>
            public static void RemoveManufacturerCandidate(string projectId, UInt160 manufacturerAddress) =>
                Logic1.removeManufacturerCandidate(projectId, manufacturerAddress);

            /// <summary>
            /// Removes a manufacturer candidate from all projects.
            /// Delegates to <see cref="Logic1.removeManufacturerCandidateFromAllProjects(UInt160)"/>.
            /// </summary>
            public static void RemoveManufacturerCandidateFromAllProjects(UInt160 manufacturerAddress) =>
                Logic1.removeManufacturerCandidateFromAllProjects(manufacturerAddress);

            /// <summary>
            /// Validates manufacturer records prior to activation.
            /// Delegates to <see cref="Logic5.validateManufacturer(string, UInt160)"/>.
            /// </summary>
            public static void ValidateManufacturer(string projectId, UInt160 manufacturer) =>
                Logic5.validateManufacturer(projectId, manufacturer);
        }
    }
    /// <summary>
    /// Captures governance, voting, and fraud-prevention workflows for projects.
    /// </summary>
    public static class Governance
    {
        /// <summary>
        /// Handles eligibility checks, weight calculations, and vote recording.
        /// </summary>
        public static class Participation
        {
            /// <summary>
            /// Determines whether a backer can vote in the current context.
            /// Delegates to <see cref="Logic1.canBackerVote(string, UInt160, bool)"/>.
            /// </summary>
            public static bool CanBackerVote(string projectId, UInt160 backer, bool ignoreAlreadyVoted = false) =>
                Logic1.canBackerVote(projectId, backer, ignoreAlreadyVoted);

            /// <summary>
            /// Determines whether a manufacturer can be activated based on aggregated voting data.
            /// Delegates to <see cref="Logic5.canActivateManufacturer(string, UInt160)"/>.
            /// </summary>
            public static bool CanActivateManufacturer(string projectId, UInt160 manufacturer) =>
                Logic5.canActivateManufacturer(projectId, manufacturer);

            /// <summary>
            /// Checks whether a participant fulfils all eligibility requirements for voting.
            /// Delegates to <see cref="Logic1.isEligibleToVote(string, UInt160)"/>.
            /// </summary>
            public static bool IsEligibleToVote(string projectId, UInt160 backerAddress) =>
                Logic1.isEligibleToVote(projectId, backerAddress);

            /// <summary>
            /// Retrieves the recorded voting status for a backer/update pair.
            /// Delegates to <see cref="Logic1.getBackerVoteStatusByComplexKey_BackerAddress_UpdateHash(string, string, UInt160)"/>.
            /// </summary>
            public static bool GetBackerVoteStatus(string projectId, string updateHash, UInt160 backerAddress) =>
                Logic1.getBackerVoteStatusByComplexKey_BackerAddress_UpdateHash(projectId, updateHash, backerAddress);

            /// <summary>
            /// Persists the voting status for a backer/update pair.
            /// Delegates to <see cref="Logic1.setBackerVoteStatusByComplexKey_BackerAddress_UpdateHash(string, string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void SetBackerVoteStatus(string projectId, string updateHash, UInt160 backerAddress, BackerVotesEnum vote) =>
                Logic1.setBackerVoteStatusByComplexKey_BackerAddress_UpdateHash(projectId, updateHash, backerAddress, vote);
        }

        /// <summary>
        /// Encapsulates computation of vote weights, tiers, and delegation flows.
        /// </summary>
        public static class VoteWeighting
        {
            /// <summary>
            /// Calculates the internal vote outcome for a project-wide decision.
            /// Delegates to <see cref="Logic1.calculateInternalVoteOutcome(string, Dictionary{UInt160, BackerVotesEnum}, string, BigInteger, BigInteger, BigInteger, BigInteger)"/>.
            /// </summary>
            public static IF_MainGateway.ProjectAccount.CalculatedVoteOutcome CalculateInternalOutcome(
                string projectId,
                Dictionary<UInt160, BackerVotesEnum> votesMap,
                string votingType,
                BigInteger explicitPositiveRaw,
                BigInteger explicitNegativeRaw,
                BigInteger explicitAbstainedRaw,
                BigInteger totalCastedRaw) =>
                Logic1.calculateInternalVoteOutcome(projectId, votesMap, votingType, explicitPositiveRaw, explicitNegativeRaw, explicitAbstainedRaw, totalCastedRaw);

            /// <summary>
            /// Computes the voting weight for a specific backer in the current context.
            /// Delegates to <see cref="Logic1.getBackerVoteWeight(string, UInt160)"/>.
            /// </summary>
            public static BigInteger GetBackerVoteWeight(string projectId, UInt160 backer) =>
                Logic1.getBackerVoteWeight(projectId, backer);

            /// <summary>
            /// Computes the voting weight for a manufacturer candidate within weighted voting schemes.
            /// Delegates to <see cref="Logic5.calculateManufacturerWeightedVoteResult(string, UInt160)"/>.
            /// </summary>
            public static BigInteger CalculateManufacturerWeightedResult(string projectId, UInt160 manufacturer) =>
                Logic5.calculateManufacturerWeightedVoteResult(projectId, manufacturer);

            /// <summary>
            /// Calculates the final score of a manufacturer after aggregating votes and reputation metrics.
            /// Delegates to <see cref="Logic5.calculateManufacturerFinalScore(string, UInt160)"/>.
            /// </summary>
            public static BigInteger CalculateManufacturerFinalScore(string projectId, UInt160 manufacturer) =>
                Logic5.calculateManufacturerFinalScore(projectId, manufacturer);

            /// <summary>
            /// Retrieves the tier assigned to a voter within a vote.
            /// Delegates to <see cref="Logic5.GetVoterTier(string, string, UInt160)"/>.
            /// </summary>
            public static byte GetVoterTier(string projectId, string voteId, UInt160 voter) =>
                Logic5.GetVoterTier(projectId, voteId, voter);

            /// <summary>
            /// Lists the tier identifiers configured for a project.
            /// Delegates to <see cref="Logic5.GetVotingTierIds(string)"/>.
            /// </summary>
            public static string[] GetVotingTierIds(string projectId) => Logic5.GetVotingTierIds(projectId);

            /// <summary>
            /// Retrieves the weight assigned to a voting tier.
            /// Delegates to <see cref="Logic5.GetVotingTierWeight(string, string)"/>.
            /// </summary>
            public static BigInteger GetVotingTierWeight(string projectId, string tierId) =>
                Logic5.GetVotingTierWeight(projectId, tierId);

            /// <summary>
            /// Clears all configured voting tier weights.
            /// Delegates to <see cref="Logic5.ClearVotingTierWeightsAll(string)"/>.
            /// </summary>
            public static void ClearAllVotingTierWeights(string projectId) => Logic5.ClearVotingTierWeightsAll(projectId);

            /// <summary>
            /// Removes a specific voting tier weight.
            /// Delegates to <see cref="Logic5.RemoveVotingTierWeight(string, string)"/>.
            /// </summary>
            public static void RemoveVotingTierWeight(string projectId, string tierId) =>
                Logic5.RemoveVotingTierWeight(projectId, tierId);

            /// <summary>
            /// Sets the tier weight for a specific tier identifier.
            /// Delegates to <see cref="Logic5.SetVotingTierWeight(string, string, BigInteger)"/>.
            /// </summary>
            public static void SetVotingTierWeight(string projectId, string tierId, BigInteger weight) =>
                Logic5.SetVotingTierWeight(projectId, tierId, weight);

            /// <summary>
            /// Assigns a tier to a voter for a specific voting session.
            /// Delegates to <see cref="Logic4.setVoterTier(string, string, UInt160, byte)"/>.
            /// </summary>
            public static void SetVoterTier(string projectId, string voteId, UInt160 voterAddress, byte tierLevel) =>
                Logic4.setVoterTier(projectId, voteId, voterAddress, tierLevel);

            /// <summary>
            /// Assigns a tier to a voter with the dispute-centric weighting logic.
            /// Delegates to <see cref="Logic5.SetVoterTier(string, string, UInt160, byte)"/>.
            /// </summary>
            public static void SetVoterTierForDisputes(string projectId, string voteId, UInt160 voter, byte tier) =>
                Logic5.SetVoterTier(projectId, voteId, voter, tier);

            /// <summary>
            /// Calculates the vote weight for a voter inside conditional voting contexts.
            /// Delegates to <see cref="Logic3.calculateVoteWeight(string, UInt160, string)"/>.
            /// </summary>
            public static BigInteger CalculateConditionalVoteWeight(string projectId, UInt160 voterAddress, string voteId) =>
                Logic3.calculateVoteWeight(projectId, voterAddress, voteId);

            /// <summary>
            /// Determines the final delegated voter for a particular backer.
            /// Delegates to <see cref="Logic1.getFinalDelegateForVoting(string, Dictionary{Dictionary{string, UInt160}, UInt160}, UInt160)"/>.
            /// </summary>
            public static UInt160 ResolveFinalDelegate(
                string projectId,
                Dictionary<Dictionary<string, UInt160>, UInt160> delegationMap,
                UInt160 backerAddress) =>
                Logic1.getFinalDelegateForVoting(projectId, delegationMap, backerAddress);

            /// <summary>
            /// Resolves the final delegate for simplified delegation maps.
            /// Delegates to <see cref="Logic4.getFinalDelegateForVoting(string, Dictionary{UInt160, UInt160}, UInt160)"/>.
            /// </summary>
            public static UInt160 ResolveFinalDelegate(string projectId, Dictionary<UInt160, UInt160> delegationMap, UInt160 backerAddress) =>
                Logic4.getFinalDelegateForVoting(projectId, delegationMap, backerAddress);
        }

        /// <summary>
        /// Groups operations that configure, trigger, and finalize voting sessions.
        /// </summary>
        public static class VotingSessions
        {
            /// <summary>
            /// Configures voting thresholds for a project.
            /// Delegates to <see cref="Logic4.configureVotingSystem(string, BigInteger, BigInteger)"/>.
            /// </summary>
            public static void ConfigureSystem(string projectId, BigInteger minParticipationPercent, BigInteger minApprovalPercent) =>
                Logic4.configureVotingSystem(projectId, minParticipationPercent, minApprovalPercent);

            /// <summary>
            /// Starts a milestone voting session with the provided requirements.
            /// Delegates to <see cref="Logic1.startMilestoneVoting(string, UInt160, byte, ulong, BigInteger)"/>.
            /// </summary>
            public static void StartMilestoneVoting(string projectId, UInt160 manufacturer, byte stepNumber, ulong duration, BigInteger minimumVotes) =>
                Logic1.startMilestoneVoting(projectId, manufacturer, stepNumber, duration, minimumVotes);

            /// <summary>
            /// Finalizes the milestone completion voting session and persists results.
            /// Delegates to <see cref="Logic1.finalizeProjectUpdateVoting(string, string)"/>.
            /// </summary>
            public static void FinalizeProjectUpdateVoting(string projectId, string updateId) =>
                Logic1.finalizeProjectUpdateVoting(projectId, updateId);

            /// <summary>
            /// Finalizes milestone voting when triggered from the investing contract.
            /// Delegates to <see cref="InvestingContract.checkAndFinalizeMilestoneVoting(string, UInt160, byte)"/>.
            /// </summary>
            public static bool FinalizeMilestoneVoting(string projectId, UInt160 manufacturer, byte stepNumber) =>
                InvestingContract.checkAndFinalizeMilestoneVoting(projectId, manufacturer, stepNumber);

            /// <summary>
            /// Finalizes the winner selection voting procedure.
            /// Delegates to <see cref="Logic4.finalizeWinnerSelectionVoting(string)"/>.
            /// </summary>
            public static void FinalizeWinnerSelection(string projectId) => Logic4.finalizeWinnerSelectionVoting(projectId);

            /// <summary>
            /// Finalizes fundraising completion voting as part of the investment bounded context.
            /// Delegates to <see cref="InvestingContract.finalizeFundraisingVoting(string)"/>.
            /// </summary>
            public static void FinalizeFundraising(string projectId) => InvestingContract.finalizeFundraisingVoting(projectId);

            /// <summary>
            /// Finalizes fundraising increase voting session.
            /// Delegates to <see cref="InvestingContract.finalizeFundraisingIncreaseVoting(string)"/>.
            /// </summary>
            public static void FinalizeFundraisingIncrease(string projectId) => InvestingContract.finalizeFundraisingIncreaseVoting(projectId);

            /// <summary>
            /// Finalizes project launch voting.
            /// Delegates to <see cref="InvestingContract.finalizeLaunchVoting(string)"/>.
            /// </summary>
            public static void FinalizeLaunchVoting(string projectId) => InvestingContract.finalizeLaunchVoting(projectId);

            /// <summary>
            /// Finalizes management transfer voting.
            /// Delegates to <see cref="InvestingContract.finalizeManagementTransferVoting(string)"/>.
            /// </summary>
            public static void FinalizeManagementTransfer(string projectId) => InvestingContract.finalizeManagementTransferVoting(projectId);

            /// <summary>
            /// Automatically finalizes all expired votings for a project.
            /// Delegates to <see cref="InvestingContract.autoFinalizeAllExpiredVotings(string)"/>.
            /// </summary>
            public static void AutoFinalizeExpired(string projectId) => InvestingContract.autoFinalizeAllExpiredVotings(projectId);

            /// <summary>
            /// Sends reminder notifications for critical voting sessions.
            /// Delegates to <see cref="Logic4.setVotingReminder(string, int, ulong)"/>.
            /// </summary>
            public static void ScheduleVotingReminder(string projectId, int voteType, ulong reminderTimestamp) =>
                Logic4.setVotingReminder(projectId, voteType, reminderTimestamp);

            /// <summary>
            /// Sends deadline notifications for active voting sessions.
            /// Delegates to <see cref="Logic4.sendDeadlineNotifications(string, int)"/>.
            /// </summary>
            public static void SendDeadlineNotifications(string projectId, int voteType) =>
                Logic4.sendDeadlineNotifications(projectId, voteType);

            /// <summary>
            /// Updates deadlines for a given voting type.
            /// Delegates to <see cref="Logic4.updateVotingTimeParameters(string, string, ulong)"/>.
            /// </summary>
            public static void UpdateVotingDeadline(string projectId, string votingType, ulong newDeadline) =>
                Logic4.updateVotingTimeParameters(projectId, votingType, newDeadline);
        }

        /// <summary>
        /// Enriches governance with anti-fraud and anomaly detection capabilities.
        /// </summary>
        public static class FraudDetection
        {
            /// <summary>
            /// Analyses whether account connections indicate collusion.
            /// Delegates to <see cref="Logic2.analyzeAccountConnections(string, UInt160)"/>.
            /// </summary>
            public static bool AnalyzeAccountConnections(string projectId, UInt160 voterAddress) =>
                Logic2.analyzeAccountConnections(projectId, voterAddress);

            /// <summary>
            /// Checks the voting frequency of a participant for anomalies.
            /// Delegates to <see cref="Logic2.analyzeVotingFrequency(string, UInt160, ulong)"/>.
            /// </summary>
            public static bool AnalyzeVotingFrequency(string projectId, UInt160 voterAddress, ulong currentVoteTime) =>
                Logic2.analyzeVotingFrequency(projectId, voterAddress, currentVoteTime);

            /// <summary>
            /// Detects identical voting patterns that may signal bot activity.
            /// Delegates to <see cref="Logic2.checkIdenticalVotingPatterns(string, UInt160)"/>.
            /// </summary>
            public static bool DetectIdenticalPatterns(string projectId, UInt160 voterAddress) =>
                Logic2.checkIdenticalVotingPatterns(projectId, voterAddress);

            /// <summary>
            /// Detects balance manipulation fraud for a voter.
            /// Delegates to <see cref="Logic2.detectBalanceManipulationFraud(string, UInt160)"/>.
            /// </summary>
            public static bool DetectBalanceManipulation(string projectId, UInt160 voterAddress) =>
                Logic2.detectBalanceManipulationFraud(projectId, voterAddress);

            /// <summary>
            /// Detects circular transactions that may support fraudulent voting.
            /// Delegates to <see cref="Logic2.detectCircularTransactions(string, UInt160, IF_MainGateway.BackerAccount)"/>.
            /// </summary>
            public static bool DetectCircularTransactions(string projectId, UInt160 voterAddress, IF_MainGateway.BackerAccount backerAccount) =>
                Logic2.detectCircularTransactions(projectId, voterAddress, backerAccount);

            /// <summary>
            /// Detects collusion among voters.
            /// Delegates to <see cref="Logic2.detectCollusionPattern(string, UInt160)"/>.
            /// </summary>
            public static bool DetectCollusion(string projectId, UInt160 voterAddress) =>
                Logic2.detectCollusionPattern(projectId, voterAddress);

            /// <summary>
            /// Detects rapid voting behaviours.
            /// Delegates to <see cref="Logic2.detectRapidVotingPattern(string, UInt160)"/>.
            /// </summary>
            public static bool DetectRapidVoting(string projectId, UInt160 voterAddress) =>
                Logic2.detectRapidVotingPattern(projectId, voterAddress);

            /// <summary>
            /// Detects Sybil attacks within a voting session.
            /// Delegates to <see cref="Logic2.detectSybilAttack(string, UInt160)"/>.
            /// </summary>
            public static bool DetectSybilAttack(string projectId, UInt160 voterAddress) =>
                Logic2.detectSybilAttack(projectId, voterAddress);

            /// <summary>
            /// Detects temporal anomalies in voting behaviour.
            /// Delegates to <see cref="Logic2.detectTemporalVotingAnomalies(string, UInt160)"/>.
            /// </summary>
            public static bool DetectTemporalAnomalies(string projectId, UInt160 voterAddress) =>
                Logic2.detectTemporalVotingAnomalies(projectId, voterAddress);

            /// <summary>
            /// Detects uniform intervals in voting which may suggest coordination.
            /// Delegates to <see cref="Logic2.detectUniformVotingIntervals(string, UInt160)"/>.
            /// </summary>
            public static bool DetectUniformIntervals(string projectId, UInt160 voterAddress) =>
                Logic2.detectUniformVotingIntervals(projectId, voterAddress);

            /// <summary>
            /// Detects suspicious vote switching behaviour.
            /// Delegates to <see cref="Logic2.detectVoteSwitchingFraud(string, UInt160, string)"/>.
            /// </summary>
            public static bool DetectVoteSwitching(string projectId, UInt160 voterAddress, string votingType) =>
                Logic2.detectVoteSwitchingFraud(projectId, voterAddress, votingType);

            /// <summary>
            /// Runs the aggregated fraud detection pipeline.
            /// Delegates to <see cref="Logic2.detectVotingFraud(UInt160, string, string)"/>.
            /// </summary>
            public static bool DetectVotingFraud(UInt160 voterAddress, string projectId, string votingType) =>
                Logic2.detectVotingFraud(voterAddress, projectId, votingType);

            /// <summary>
            /// Validates voting integrity after cross-checking all fraud detectors.
            /// Delegates to <see cref="Logic2.validateVotingIntegrity(string)"/>.
            /// </summary>
            public static bool ValidateVotingIntegrity(string projectId) => Logic2.validateVotingIntegrity(projectId);
        }

        /// <summary>
        /// Coordinates project level voting decisions outside of milestone completion.
        /// </summary>
        public static class ProjectDecisions
        {
            /// <summary>
            /// Records an abstain vote for a project update.
            /// Delegates to <see cref="Logic1.voteAbstain(string, UInt160, int, string)"/>.
            /// </summary>
            public static void VoteAbstain(string projectId, UInt160 voterAddress, int voteType, string updateHash) =>
                Logic1.voteAbstain(projectId, voterAddress, voteType, updateHash);

            /// <summary>
            /// Casts a vote in favour of a manufacturer candidate.
            /// Delegates to <see cref="Logic1.voteForManufacturerWinner(string, UInt160, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteForManufacturerWinner(string projectId, UInt160 backer, UInt160 manufacturer, BackerVotesEnum vote) =>
                Logic1.voteForManufacturerWinner(projectId, backer, manufacturer, vote);

            /// <summary>
            /// Casts a vote on a milestone completion step.
            /// Delegates to <see cref="Logic1.voteToMilestoneCompletionStep(string, UInt160, UInt160, byte, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteMilestoneCompletion(
                string projectId,
                UInt160 backer,
                UInt160 manufacturerCandidate,
                byte stepNumber,
                BackerVotesEnum vote) =>
                Logic1.voteToMilestoneCompletionStep(projectId, backer, manufacturerCandidate, stepNumber, vote);

            /// <summary>
            /// Casts a vote on a project update.
            /// Delegates to <see cref="Logic1.voteProjectUpdate(string, UInt160, string, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteProjectUpdate(string projectId, UInt160 backer, string updateId, BackerVotesEnum vote) =>
                Logic1.voteProjectUpdate(projectId, backer, updateId, vote);

            /// <summary>
            /// Casts a vote for the project launch decision.
            /// Delegates to <see cref="Logic4.voteLaunchProject(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteLaunchProject(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic4.voteLaunchProject(projectId, backer, vote);

            /// <summary>
            /// Casts a vote for transferring project management to InnFork.
            /// Delegates to <see cref="Logic3.voteForTransferProjectManagementToInnFork(string, UInt160, bool)"/>.
            /// </summary>
            public static void VoteTransferManagement(string projectId, UInt160 backer, bool votingFor) =>
                Logic3.voteForTransferProjectManagementToInnFork(projectId, backer, votingFor);

            /// <summary>
            /// Casts a vote to complete fundraising.
            /// Delegates to <see cref="Logic3.voteFundraisingCompletion(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteFundraisingCompletion(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic3.voteFundraisingCompletion(projectId, backer, vote);

            /// <summary>
            /// Casts a vote for increasing the project budget.
            /// Delegates to <see cref="Logic3.voteIncreaseProjectBudget(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteIncreaseBudget(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic3.voteIncreaseProjectBudget(projectId, backer, vote);

            /// <summary>
            /// Casts a vote to pause or resume the project.
            /// Delegates to <see cref="Logic3.votePauseResume(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VotePauseResume(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic3.votePauseResume(projectId, backer, vote);

            /// <summary>
            /// Casts a vote for successful closure of the project.
            /// Delegates to <see cref="Logic3.voteSuccessfulClosure(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteSuccessfulClosure(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic3.voteSuccessfulClosure(projectId, backer, vote);

            /// <summary>
            /// Casts a vote for terminating the project with refund.
            /// Delegates to <see cref="Logic3.voteTerminationWithRefund(string, UInt160, BackerVotesEnum)"/>.
            /// </summary>
            public static void VoteTerminationWithRefund(string projectId, UInt160 backer, BackerVotesEnum vote) =>
                Logic3.voteTerminationWithRefund(projectId, backer, vote);
        }

        /// <summary>
        /// Orchestrates manufacturer winner selection and related automations.
        /// </summary>
        public static class WinnerSelection
        {
            /// <summary>
            /// Evaluates whether winners can be selected for a project.
            /// Delegates to <see cref="Logic4.canSelectWinner(string)"/>.
            /// </summary>
            public static bool CanSelectWinner(string projectId) => Logic4.canSelectWinner(projectId);

            /// <summary>
            /// Calculates winners using the on-chain lottery logic.
            /// Delegates to <see cref="Logic4.calculateWinners(UInt160)"/>.
            /// </summary>
            public static void CalculateWinners(UInt160 fromAddress) => Logic4.calculateWinners(fromAddress);

            /// <summary>
            /// Selects the winner manufacturer for the project.
            /// Delegates to <see cref="Logic4.selectWinnerManufacturer(string)"/>.
            /// </summary>
            public static UInt160 SelectWinnerManufacturer(string projectId) => Logic4.selectWinnerManufacturer(projectId);

            /// <summary>
            /// Sets automatic winner selection preferences for a backer.
            /// Delegates to <see cref="Logic5.setAutoSelectWinner(string, UInt160, UInt160)"/>.
            /// </summary>
            public static void SetAutoSelectWinner(string projectId, UInt160 backer, UInt160 manufacturer) =>
                Logic5.setAutoSelectWinner(projectId, backer, manufacturer);
        }

        /// <summary>
        /// Maintains conditional voting rules and guardrails.
        /// </summary>
        public static class ConditionalVoting
        {
            /// <summary>
            /// Adds a conditional rule to gate voting outcomes.
            /// Delegates to <see cref="Logic3.addConditionalVotingRule(string, string, BigInteger)"/>.
            /// </summary>
            public static void AddRule(string projectId, string ruleId, BigInteger threshold) =>
                Logic3.addConditionalVotingRule(projectId, ruleId, threshold);

            /// <summary>
            /// Checks the status of a conditional voting rule.
            /// Delegates to <see cref="Logic3.checkConditionalVotingStatus(string, string)"/>.
            /// </summary>
            public static bool CheckRuleStatus(string projectId, string ruleId) =>
                Logic3.checkConditionalVotingStatus(projectId, ruleId);
        }
    }
    /// <summary>
    /// Provides compliance, sanctions, and participant state management.
    /// </summary>
    public static class Compliance
    {
        /// <summary>
        /// Manages banning, penalties, and sanction lifecycles for project participants.
        /// </summary>
        public static class Sanctions
        {
            /// <summary>
            /// Applies ban sanctions to a backer.
            /// Delegates to <see cref="Logic1.applyBackerBanSanctions(string, UInt160, BanReason)"/>.
            /// </summary>
            public static void ApplyBackerBan(string projectId, UInt160 backerAddress, BanReason reason) =>
                Logic1.applyBackerBanSanctions(projectId, backerAddress, reason);

            /// <summary>
            /// Applies ban sanctions to a manufacturer.
            /// Delegates to <see cref="Logic1.applyManufacturerBanSanctions(string, UInt160, BanReason)"/>.
            /// </summary>
            public static void ApplyManufacturerBan(string projectId, UInt160 manufacturerAddress, BanReason reason) =>
                Logic1.applyManufacturerBanSanctions(projectId, manufacturerAddress, reason);

            /// <summary>
            /// Bans a backer from participating in the project.
            /// Delegates to <see cref="Logic1.banBacker(string, UInt160, BanReason)"/>.
            /// </summary>
            public static void BanBacker(string projectId, UInt160 backerAddress, BanReason reason) =>
                Logic1.banBacker(projectId, backerAddress, reason);

            /// <summary>
            /// Bans a manufacturer from the project ecosystem.
            /// Delegates to <see cref="Logic1.banManufacturer(string, UInt160, BanReason)"/>.
            /// </summary>
            public static void BanManufacturer(string projectId, UInt160 manufacturerAddress, BanReason reason) =>
                Logic1.banManufacturer(projectId, manufacturerAddress, reason);

            /// <summary>
            /// Applies a graded fraud penalty to a voter based on fraud type.
            /// Delegates to <see cref="Logic2.applyGradedFraudPenalties(string, UInt160, FraudType)"/>.
            /// </summary>
            public static void ApplyGradedFraudPenalty(string projectId, UInt160 voterAddress, FraudType fraudType) =>
                Logic2.applyGradedFraudPenalties(projectId, voterAddress, fraudType);

            /// <summary>
            /// Applies a standard fraud penalty to a voter.
            /// Delegates to <see cref="Logic2.applyFraudPenalties(string, UInt160)"/>.
            /// </summary>
            public static void ApplyFraudPenalty(string projectId, UInt160 voterAddress) =>
                Logic2.applyFraudPenalties(projectId, voterAddress);

            /// <summary>
            /// Applies rejection penalties when disputes conclude unfavourably.
            /// Delegates to <see cref="Logic1.applyRejectionPenalty(string, UInt160, DisputeType)"/>.
            /// </summary>
            public static void ApplyRejectionPenalty(string projectId, UInt160 initiator, DisputeType disputeType) =>
                Logic1.applyRejectionPenalty(projectId, initiator, disputeType);

            /// <summary>
            /// Clears accumulated penalties for a manufacturer after rehabilitation.
            /// Delegates to <see cref="Logic1.clearPenalty(string, UInt160)"/>.
            /// </summary>
            public static void ClearPenalty(string projectId, UInt160 manufacturerAddress) =>
                Logic1.clearPenalty(projectId, manufacturerAddress);

            /// <summary>
            /// Processes automatic unbans according to governance decisions.
            /// Delegates to <see cref="Logic1.processAutomaticUnbans(string)"/>.
            /// </summary>
            public static void ProcessAutomaticUnbans(string projectId) => Logic1.processAutomaticUnbans(projectId);

            /// <summary>
            /// Updates manufacturer reputation after a penalty is imposed.
            /// Delegates to <see cref="Logic1.updateManufacturerReputationAfterPenalty(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void UpdateReputationAfterPenalty(string projectId, UInt160 manufacturerAddress, BigInteger penaltyAmount) =>
                Logic1.updateManufacturerReputationAfterPenalty(projectId, manufacturerAddress, penaltyAmount);
        }

        /// <summary>
        /// Offers read-model access to compliance statistics.
        /// </summary>
        public static class Insights
        {
            /// <summary>
            /// Retrieves the ban reason for a participant.
            /// Delegates to <see cref="Logic1.getParticipantBanReason(string, UInt160)"/>.
            /// </summary>
            public static BanReason GetParticipantBanReason(string projectId, UInt160 participantAddress) =>
                Logic1.getParticipantBanReason(projectId, participantAddress);

            /// <summary>
            /// Retrieves the manufacturer penalty count.
            /// Delegates to <see cref="Logic1.getManufacturerTotalPenalties(string, UInt160)"/>.
            /// </summary>
            public static BigInteger GetManufacturerTotalPenalties(string projectId, UInt160 manufacturerAddress) =>
                Logic1.getManufacturerTotalPenalties(projectId, manufacturerAddress);

            /// <summary>
            /// Retrieves the last penalty timestamp for a manufacturer.
            /// Delegates to <see cref="Logic1.getManufacturerLastPenaltyTime(string, UInt160)"/>.
            /// </summary>
            public static ulong GetManufacturerLastPenaltyTime(string projectId, UInt160 manufacturerAddress) =>
                Logic1.getManufacturerLastPenaltyTime(projectId, manufacturerAddress);

            /// <summary>
            /// Calculates the risk score associated with a ban reason.
            /// Delegates to <see cref="Logic1.getRiskScoreForBanReason(BanReason)"/>.
            /// </summary>
            public static BigInteger GetRiskScore(BanReason reason) => Logic1.getRiskScoreForBanReason(reason);

            /// <summary>
            /// Checks whether a participant is currently banned.
            /// Delegates to <see cref="Logic2.isParticipantBanned(string, UInt160)"/>.
            /// </summary>
            public static bool IsParticipantBanned(string projectId, UInt160 participantAddress) =>
                Logic2.isParticipantBanned(projectId, participantAddress);

            /// <summary>
            /// Creates a deterministic key used to block funds for sanctioned backers.
            /// Delegates to <see cref="Logic3.createBlockedFundsKey(UInt160, BanReason)"/>.
            /// </summary>
            public static string CreateBlockedFundsKey(UInt160 backerAddress, BanReason reason) =>
                Logic3.createBlockedFundsKey(backerAddress, reason);
        }
    }
    /// <summary>
    /// Coordinates dispute management, escalation, and resolution workflows.
    /// </summary>
    public static class Disputes
    {
        /// <summary>
        /// Manages dispute creation and lifecycle state transitions.
        /// </summary>
        public static class Lifecycle
        {
            /// <summary>
            /// Creates a general dispute record.
            /// Delegates to <see cref="Logic3.createDispute(string, UInt160, DisputeType, string, UInt160, byte)"/>.
            /// </summary>
            public static string CreateDispute(string projectId, UInt160 initiator, DisputeType disputeType, string description, UInt160 manufacturerInvolved = null, byte milestoneStepInvolved = 0) =>
                Logic3.createDispute(projectId, initiator, disputeType, description, manufacturerInvolved, milestoneStepInvolved);

            /// <summary>
            /// Creates a milestone specific dispute entry.
            /// Delegates to <see cref="Logic3.createMilestoneDispute(UInt160, string, UInt160, byte, string)"/>.
            /// </summary>
            public static void CreateMilestoneDispute(UInt160 initiatorAddress, string projectId, UInt160 manufacturerAddress, byte stepNumber, string disputeReason) =>
                Logic3.createMilestoneDispute(initiatorAddress, projectId, manufacturerAddress, stepNumber, disputeReason);

            /// <summary>
            /// Resolves a dispute by transitioning it to a new status.
            /// Delegates to <see cref="Logic3.resolveDispute(string, string, DisputeStatus, string)"/>.
            /// </summary>
            public static void ResolveDispute(string projectId, string disputeId, DisputeStatus newStatus, string resolutionNote) =>
                Logic3.resolveDispute(projectId, disputeId, newStatus, resolutionNote);

            /// <summary>
            /// Validates dispute status transitions.
            /// Delegates to <see cref="Logic3.isValidStatusTransition(DisputeStatus, DisputeStatus)"/>.
            /// </summary>
            public static bool IsValidTransition(DisputeStatus current, DisputeStatus next) =>
                Logic3.isValidStatusTransition(current, next);
        }

        /// <summary>
        /// Executes escalation handlers across dispute scenarios.
        /// </summary>
        public static class Escalation
        {
            /// <summary>
            /// Handles general escalation events.
            /// Delegates to <see cref="Logic1.handleGeneralEscalation(string, string)"/>.
            /// </summary>
            public static void HandleGeneralEscalation(string projectId, string disputeId) =>
                Logic1.handleGeneralEscalation(projectId, disputeId);

            /// <summary>
            /// Escalates milestone disputes to higher governance levels.
            /// Delegates to <see cref="Logic5.handleMilestoneEscalation(string, string)"/>.
            /// </summary>
            public static void HandleMilestoneEscalation(string projectId, string disputeId) =>
                Logic5.handleMilestoneEscalation(projectId, disputeId);

            /// <summary>
            /// Escalates fraud related disputes.
            /// Delegates to <see cref="Logic5.handleFraudEscalation(string, string)"/>.
            /// </summary>
            public static void HandleFraudEscalation(string projectId, string disputeId) =>
                Logic5.handleFraudEscalation(projectId, disputeId);

            /// <summary>
            /// Escalates payment disputes.
            /// Delegates to <see cref="Logic5.handlePaymentEscalation(string, string)"/>.
            /// </summary>
            public static void HandlePaymentEscalation(string projectId, string disputeId) =>
                Logic5.handlePaymentEscalation(projectId, disputeId);

            /// <summary>
            /// Escalates general disputes.
            /// Delegates to <see cref="Logic5.handleDisputeEscalation(string, string)"/>.
            /// </summary>
            public static void HandleDisputeEscalation(string projectId, string disputeId) =>
                Logic5.handleDisputeEscalation(projectId, disputeId);
        }

        /// <summary>
        /// Applies dispute resolution outcomes to platform state.
        /// </summary>
        public static class Resolution
        {
            /// <summary>
            /// Handles contract breach resolutions.
            /// Delegates to <see cref="Logic5.handleContractBreachResolution(string, string)"/>.
            /// </summary>
            public static void HandleContractBreach(string projectId, string disputeId) =>
                Logic5.handleContractBreachResolution(projectId, disputeId);

            /// <summary>
            /// Handles rejection outcomes for disputes.
            /// Delegates to <see cref="Logic5.handleDisputeRejection(string, string)"/>.
            /// </summary>
            public static void HandleRejection(string projectId, string disputeId) =>
                Logic5.handleDisputeRejection(projectId, disputeId);

            /// <summary>
            /// Handles successful dispute resolutions.
            /// Delegates to <see cref="Logic5.handleDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandleResolution(string projectId, string disputeId) =>
                Logic5.handleDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Handles general dispute resolutions.
            /// Delegates to <see cref="Logic5.handleGeneralDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandleGeneralResolution(string projectId, string disputeId) =>
                Logic5.handleGeneralDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Handles milestone dispute resolutions.
            /// Delegates to <see cref="Logic5.handleMilestoneDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandleMilestoneResolution(string projectId, string disputeId) =>
                Logic5.handleMilestoneDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Handles payment dispute resolutions.
            /// Delegates to <see cref="Logic5.handlePaymentDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandlePaymentResolution(string projectId, string disputeId) =>
                Logic5.handlePaymentDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Handles fraud dispute resolutions.
            /// Delegates to <see cref="Logic5.handleFraudDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandleFraudResolution(string projectId, string disputeId) =>
                Logic5.handleFraudDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Handles quality dispute resolutions.
            /// Delegates to <see cref="Logic5.handleQualityDisputeResolution(string, string)"/>.
            /// </summary>
            public static void HandleQualityResolution(string projectId, string disputeId) =>
                Logic5.handleQualityDisputeResolution(projectId, disputeId);

            /// <summary>
            /// Rolls back investor funds after dispute settlement.
            /// Delegates to <see cref="Logic1.handleInvestorRollback(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void HandleInvestorRollback(string projectId, UInt160 manufacturerAddress, BigInteger rolledBackAmount) =>
                Logic1.handleInvestorRollback(projectId, manufacturerAddress, rolledBackAmount);
        }

        /// <summary>
        /// Provides dispute-related analytics and safety checks.
        /// </summary>
        public static class Insights
        {
            /// <summary>
            /// Checks if a manufacturer consumed milestone funding before dispute resolution.
            /// Delegates to <see cref="Logic5.hasManufacturerUsedMilestoneFunding(string, UInt160)"/>.
            /// </summary>
            public static bool HasManufacturerUsedMilestoneFunding(string projectId, UInt160 manufacturerId) =>
                Logic5.hasManufacturerUsedMilestoneFunding(projectId, manufacturerId);
        }
    }
    /// <summary>
    /// Aggregates treasury, prize fund, and investment flows that move assets within the platform.
    /// </summary>
    public static class Finance
    {
        /// <summary>
        /// Handles treasury-level fund reservation, locking, and payouts.
        /// </summary>
        public static class Treasury
        {
            /// <summary>
            /// Blocks backer funds due to sanctions or compliance holds.
            /// Delegates to <see cref="Logic1.blockBackerFinance(string, UInt160, BanReason, BigInteger)"/>.
            /// </summary>
            public static void BlockBackerFunds(string projectId, UInt160 backerAddress, BanReason reason, BigInteger amountToBlock) =>
                Logic1.blockBackerFinance(projectId, backerAddress, reason, amountToBlock);

            /// <summary>
            /// Checks whether a backer can withdraw funds reserved for a manufacturer.
            /// Delegates to <see cref="Logic1.canWithdrawReservedForManufacturerFunds(string, UInt160, UInt160)"/>.
            /// </summary>
            public static bool CanWithdrawReservedForManufacturer(string projectId, UInt160 backer, UInt160 manufacturer) =>
                Logic1.canWithdrawReservedForManufacturerFunds(projectId, backer, manufacturer);

            /// <summary>
            /// Releases previously blocked funds for a backer.
            /// Delegates to <see cref="Logic1.unBlockBackerFinance(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void UnblockBackerFunds(string projectId, UInt160 backerAddress, BigInteger amountToRestore) =>
                Logic1.unBlockBackerFinance(projectId, backerAddress, amountToRestore);

            /// <summary>
            /// Locks funds on the project treasury.
            /// Delegates to <see cref="Logic1.lockFunds(string, BigInteger)"/>.
            /// </summary>
            public static void LockFunds(string projectId, BigInteger amount) => Logic1.lockFunds(projectId, amount);

            /// <summary>
            /// Unlocks funds on the project treasury.
            /// Delegates to <see cref="Logic1.unlockFunds(string, BigInteger)"/>.
            /// </summary>
            public static void UnlockFunds(string projectId, BigInteger amount) => Logic1.unlockFunds(projectId, amount);

            /// <summary>
            /// Processes conditional milestone funding releases.
            /// Delegates to <see cref="Logic1.processMilestoneConditionalFunding(UInt160, string, byte, BigInteger)"/>.
            /// </summary>
            public static void ProcessConditionalMilestoneFunding(UInt160 manufacturerAddress, string projectId, byte stepNumber, BigInteger conditionalAmount) =>
                Logic1.processMilestoneConditionalFunding(manufacturerAddress, projectId, stepNumber, conditionalAmount);

            /// <summary>
            /// Processes milestone funding payouts.
            /// Delegates to <see cref="Logic1.processMilestoneFunding(string, UInt160, byte)"/>.
            /// </summary>
            public static void ProcessMilestoneFunding(string projectId, UInt160 manufacturer, byte stepNumber) =>
                Logic1.processMilestoneFunding(projectId, manufacturer, stepNumber);

            /// <summary>
            /// Rolls back milestone funding.
            /// Delegates to <see cref="Logic1.rollbackMilestoneFunding(string, UInt160, byte, string)"/>.
            /// </summary>
            public static void RollbackMilestoneFunding(string projectId, UInt160 manufacturerAddress, byte stepNumber, string rollbackReason) =>
                Logic1.rollbackMilestoneFunding(projectId, manufacturerAddress, stepNumber, rollbackReason);

            /// <summary>
            /// Reserves backer funds for a manufacturer candidate.
            /// Delegates to <see cref="Logic4.reserveBackerFundsForManufacturer(string, UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void ReserveBackerFunds(string projectId, UInt160 backer, UInt160 manufacturer, BigInteger amount) =>
                Logic4.reserveBackerFundsForManufacturer(projectId, backer, manufacturer, amount);

            /// <summary>
            /// Determines if a backer can withdraw their contributions from a project.
            /// Delegates to <see cref="Logic4.canWithdrawFromProject(string, UInt160)"/>.
            /// </summary>
            public static bool CanWithdrawFromProject(string projectId, UInt160 backer) =>
                Logic4.canWithdrawFromProject(projectId, backer);

            /// <summary>
            /// Allocates funds across project pools.
            /// Delegates to <see cref="Logic4.allocateFunds(string, UInt160, byte)"/>.
            /// </summary>
            public static void AllocateFunds(string projectId, UInt160 backer, byte prizeFundPartAllocation) =>
                Logic4.allocateFunds(projectId, backer, prizeFundPartAllocation);

            /// <summary>
            /// Pays prize fund amounts to the manufacturer winner.
            /// Delegates to <see cref="Logic4.paymentPrizeFundToManufacturer(string, UInt160)"/>.
            /// </summary>
            public static void PayPrizeFundToManufacturer(string projectId, UInt160 winnerAddress) =>
                Logic4.paymentPrizeFundToManufacturer(projectId, winnerAddress);

            /// <summary>
            /// Distributes referral rewards to community referrers.
            /// Delegates to <see cref="Logic4.distributeReferralReward(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void DistributeReferralReward(string projectId, UInt160 referrerAddress, BigInteger amount) =>
                Logic4.distributeReferralReward(projectId, referrerAddress, amount);

            /// <summary>
            /// Collects fees owed to the project author.
            /// Delegates to <see cref="Logic4.collectFeeForProjectAuthor(string, UInt160)"/>.
            /// </summary>
            public static void CollectProjectAuthorFee(string projectId, UInt160 projectCreatorAddress) =>
                Logic4.collectFeeForProjectAuthor(projectId, projectCreatorAddress);

            /// <summary>
            /// Distributes token rewards to backers.
            /// Delegates to <see cref="Logic3.distributeTokenRewards(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void DistributeTokenRewards(string projectId, UInt160 backerAddress, BigInteger tokenAmount) =>
                Logic3.distributeTokenRewards(projectId, backerAddress, tokenAmount);

            /// <summary>
            /// Sets the reward token contract used for payouts.
            /// Delegates to <see cref="Logic3.setRewardTokenContract(string, UInt160)"/>.
            /// </summary>
            public static void SetRewardTokenContract(string projectId, UInt160 tokenContractAddress) =>
                Logic3.setRewardTokenContract(projectId, tokenContractAddress);

            /// <summary>
            /// Registers a referral relationship between backers.
            /// Delegates to <see cref="Logic4.registerReferrer(string, UInt160, UInt160)"/>.
            /// </summary>
            public static void RegisterReferrer(string projectId, UInt160 backerAddress, UInt160 referrerAddress) =>
                Logic4.registerReferrer(projectId, backerAddress, referrerAddress);

            /// <summary>
            /// Processes all project winners including fund transfers.
            /// Delegates to <see cref="Logic4.processProjectsWinner(string, UInt160)"/>.
            /// </summary>
            public static void ProcessProjectWinner(string projectId, UInt160 fromAddress) =>
                Logic4.processProjectsWinner(projectId, fromAddress);

            /// <summary>
            /// Sets the billing contract callback for manufacturer purchases.
            /// Delegates to <see cref="Logic4.setBillingProductBuyContractCallbackAddressOwner(string, UInt160, UInt160)"/>.
            /// </summary>
            public static void SetBillingCallbackOwner(string projectId, UInt160 manufacturerAddress, UInt160 callbackAddress) =>
                Logic4.setBillingProductBuyContractCallbackAddressOwner(projectId, manufacturerAddress, callbackAddress);

            /// <summary>
            /// Checks whether the project funding goal was reached.
            /// Delegates to <see cref="Logic4.isFundingGoalReached(string)"/>.
            /// </summary>
            public static bool IsFundingGoalReached(string projectId) => Logic4.isFundingGoalReached(projectId);

            /// <summary>
            /// Safely refunds all donations to contributors.
            /// Delegates to <see cref="Logic4.safeRefundAllDonations(string)"/>.
            /// </summary>
            public static void SafeRefundAllDonations(string projectId) => Logic4.safeRefundAllDonations(projectId);

            /// <summary>
            /// Returns all reserved investments for a manufacturer candidate.
            /// Delegates to <see cref="Logic1.returnAllReservedInvestmentsFromCandidate(string, UInt160)"/>.
            /// </summary>
            public static void ReturnAllReservedInvestments(string projectId, UInt160 manufacturerAddress) =>
                Logic1.returnAllReservedInvestmentsFromCandidate(projectId, manufacturerAddress);

            /// <summary>
            /// Returns investments to an investor.
            /// Delegates to <see cref="Logic1.returnInvestmentToInvestor(string, UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void ReturnInvestmentToInvestor(string projectId, UInt160 investorAddress, UInt160 manufacturerAddress, BigInteger amount) =>
                Logic1.returnInvestmentToInvestor(projectId, investorAddress, manufacturerAddress, amount);

            /// <summary>
            /// Imposes a penalty affecting the project treasury.
            /// Delegates to <see cref="Logic1.imposePenalty(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void ImposePenalty(string projectId, UInt160 manufacturerAddress, BigInteger penaltyAmount) =>
                Logic1.imposePenalty(projectId, manufacturerAddress, penaltyAmount);

            /// <summary>
            /// Distributes consented funds to a manufacturer.
            /// Delegates to <see cref="Logic2.distributeConsentedFunds(string, UInt160)"/>.
            /// </summary>
            public static void DistributeConsentedFunds(string projectId, UInt160 manufacturer) =>
                Logic2.distributeConsentedFunds(projectId, manufacturer);

            /// <summary>
            /// Distributes manufacturer profit according to agreements.
            /// Delegates to <see cref="Logic2.distributeManufacturerProfit(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void DistributeManufacturerProfit(string projectId, UInt160 manufacturerAddress, BigInteger profitAmount) =>
                Logic2.distributeManufacturerProfit(projectId, manufacturerAddress, profitAmount);

            /// <summary>
            /// Handles project winner status reset before new voting cycles.
            /// Delegates to <see cref="Logic1.resetProjectWinnerStatus(string)"/>.
            /// </summary>
            public static void ResetProjectWinnerStatus(string projectId) => Logic1.resetProjectWinnerStatus(projectId);
        }

        /// <summary>
        /// Manages prize fund configuration and donor contributions.
        /// </summary>
        public static class PrizeFund
        {
            /// <summary>
            /// Retrieves the donation amount a backer contributed to the prize fund.
            /// Delegates to <see cref="Logic2.getBackerPrizeFundDonation(string, UInt160)"/>.
            /// </summary>
            public static BigInteger GetBackerDonation(string projectId, UInt160 backer) =>
                Logic2.getBackerPrizeFundDonation(projectId, backer);

            /// <summary>
            /// Checks whether a backer donated to the prize fund.
            /// Delegates to <see cref="Logic2.isBackerDonatedToPrizeFund(string, UInt160)"/>.
            /// </summary>
            public static bool HasBackerDonated(string projectId, UInt160 backer) =>
                Logic2.isBackerDonatedToPrizeFund(projectId, backer);

            /// <summary>
            /// Processes a prize fund donation from a backer.
            /// Delegates to <see cref="Logic2.processBackerPrizeFundDonation(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void ProcessDonation(string projectId, UInt160 backerAddress, BigInteger amount) =>
                Logic2.processBackerPrizeFundDonation(projectId, backerAddress, amount);

            /// <summary>
            /// Retrieves a backer's reserved amount for a manufacturer.
            /// Delegates to <see cref="Logic2.getBackerReservedAmountForManufacturer(string, UInt160, UInt160)"/>.
            /// </summary>
            public static BigInteger GetReservedAmountForManufacturer(string projectId, UInt160 backer, UInt160 manufacturerCandidate) =>
                Logic2.getBackerReservedAmountForManufacturer(projectId, backer, manufacturerCandidate);

            /// <summary>
            /// Determines if a backer consents to using prize fund for milestone funding.
            /// Delegates to <see cref="Logic2.getBackerAutoConsent_ToUsePrizeFundToMilestoneFunding(string, UInt160)"/>.
            /// </summary>
            public static bool GetBackerAutoConsent(string projectId, UInt160 backer) =>
                Logic2.getBackerAutoConsent_ToUsePrizeFundToMilestoneFunding(projectId, backer);

            /// <summary>
            /// Sets backer consent to use the prize fund for milestone funding.
            /// Delegates to <see cref="Logic2.setBackerAutoConsent_ToUsePrizeFundToMilestoneFunding(string, UInt160, bool)"/>.
            /// </summary>
            public static void SetBackerAutoConsent(string projectId, UInt160 backer, bool consent) =>
                Logic2.setBackerAutoConsent_ToUsePrizeFundToMilestoneFunding(projectId, backer, consent);
        }

        /// <summary>
        /// Exposes investor account operations and treasury integration points.
        /// </summary>
        public static class Investing
        {
            /// <summary>
            /// Allows a backer to donate directly to a manufacturer as an investor.
            /// Delegates to <see cref="InvestingContract.donateToProjectManufacturerAsInvestor(string, UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void DonateToManufacturer(string projectId, UInt160 investorAddress, UInt160 manufacturerAddress, BigInteger amount) =>
                InvestingContract.donateToProjectManufacturerAsInvestor(projectId, investorAddress, manufacturerAddress, amount);

            /// <summary>
            /// Checks whether an investor can withdraw funds.
            /// Delegates to <see cref="InvestingContract.canWithdrawInvestment(string, UInt160, UInt160)"/>.
            /// </summary>
            public static bool CanWithdrawInvestment(string projectId, UInt160 investorAddress, UInt160 manufacturerAddress) =>
                InvestingContract.canWithdrawInvestment(projectId, investorAddress, manufacturerAddress);

            /// <summary>
            /// Withdraws money back from a project to a backer account.
            /// Delegates to <see cref="Logic2.moneyBackFromProjectToBackerAccount(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void MoneyBackToBacker(string projectId, UInt160 backerAddress, BigInteger amount) =>
                Logic2.moneyBackFromProjectToBackerAccount(projectId, backerAddress, amount);

            /// <summary>
            /// Allows proposing a profit share arrangement.
            /// Delegates to <see cref="Logic2.proposeProfitShare(string, UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void ProposeProfitShare(string projectId, UInt160 investorAddress, UInt160 manufacturerAddress, BigInteger profitSharePercentage) =>
                Logic2.proposeProfitShare(projectId, investorAddress, manufacturerAddress, profitSharePercentage);

            /// <summary>
            /// Sets the minimum investment threshold for a manufacturer.
            /// Delegates to <see cref="Logic2.setManufacturerMinInvestment(string, UInt160, BigInteger)"/>.
            /// </summary>
            public static void SetManufacturerMinimumInvestment(string projectId, UInt160 manufacturerId, BigInteger amount) =>
                Logic2.setManufacturerMinInvestment(projectId, manufacturerId, amount);

            /// <summary>
            /// Collects project author fees from the investing contract perspective.
            /// Delegates to <see cref="InvestingContract.collectFeeForProjectAuthor(string, UInt160)"/>.
            /// </summary>
            public static void CollectProjectAuthorFeeViaInvesting(string projectId, UInt160 projectCreatorAddress) =>
                InvestingContract.collectFeeForProjectAuthor(projectId, projectCreatorAddress);

            /// <summary>
            /// Invokes the backer account facade within the investing contract.
            /// Delegates to <see cref="InvestingContract.callBackerAccountFacade(string, object[])"/>.
            /// </summary>
            public static string CallBackerAccountFacade(string operation, params object[] args) =>
                InvestingContract.callBackerAccountFacade(operation, args);

            /// <summary>
            /// Invokes the investor account facade within the investing contract.
            /// Delegates to <see cref="InvestingContract.callInvestorAccountFacade(string, object[])"/>.
            /// </summary>
            public static string CallInvestorAccountFacade(string operation, params object[] args) =>
                InvestingContract.callInvestorAccountFacade(operation, args);

            /// <summary>
            /// Invokes the manufacturer account facade within the investing contract.
            /// Delegates to <see cref="InvestingContract.callManufacturerAccountFacade(string, object[])"/>.
            /// </summary>
            public static string CallManufacturerAccountFacade(string operation, params object[] args) =>
                InvestingContract.callManufacturerAccountFacade(operation, args);

            /// <summary>
            /// Invokes the project creator account facade within the investing contract.
            /// Delegates to <see cref="InvestingContract.callProjectCreatorAccountFacade(string, object[])"/>.
            /// </summary>
            public static string CallProjectCreatorAccountFacade(string operation, params object[] args) =>
                InvestingContract.callProjectCreatorAccountFacade(operation, args);

            /// <summary>
            /// Checks all milestone votings to drive automatic settlement.
            /// Delegates to <see cref="InvestingContract.checkAllMilestoneVotings(string)"/>.
            /// </summary>
            public static void CheckAllMilestoneVotings(string projectId) => InvestingContract.checkAllMilestoneVotings(projectId);
        }
    }
    /// <summary>
    /// Represents the marketplace bounded context backed by the NeoFS product shop contract.
    /// </summary>
    public static class Marketplace
    {
        /// <summary>
        /// Manages manufacturer onboarding and analytics.
        /// </summary>
        public static class Manufacturers
        {
            /// <summary>
            /// Creates a manufacturer account in the product shop.
            /// Delegates to <see cref="ProductShopContract.createManufacturerAccount(UInt160, string, byte[])"/>.
            /// </summary>
            public static void CreateManufacturerAccount(UInt160 manufacturerAddress, string name, byte[] publicKey) =>
                ProductShopContract.createManufacturerAccount(manufacturerAddress, name, publicKey);

            /// <summary>
            /// Retrieves manufacturer account details.
            /// Delegates to <see cref="ProductShopContract.getManufacturerAccount(UInt160)"/>.
            /// </summary>
            public static IF_NeoFS_Products.ManufacturerAccount GetManufacturerAccount(UInt160 manufacturerAddress) =>
                ProductShopContract.getManufacturerAccount(manufacturerAddress);

            /// <summary>
            /// Retrieves manufacturer sales analytics.
            /// Delegates to <see cref="ProductShopContract.getManufacturerSalesAnalytics(UInt160)"/>.
            /// </summary>
            public static Dictionary<string, BigInteger> GetManufacturerSalesAnalytics(UInt160 manufacturerAddress) =>
                ProductShopContract.getManufacturerSalesAnalytics(manufacturerAddress);
        }

        /// <summary>
        /// Maintains product catalog operations.
        /// </summary>
        public static class Catalog
        {
            /// <summary>
            /// Registers a new product in the marketplace.
            /// Delegates to <see cref="ProductShopContract.registerProduct(UInt160, string, string, string, string, BigInteger, UInt160, BigInteger)"/>.
            /// </summary>
            public static UInt160 RegisterProduct(
                UInt160 manufacturerAddress,
                string projectId,
                string name,
                string description,
                string neoFsContainerId,
                string neoFsObjectId,
                BigInteger price,
                UInt160 priceToken,
                BigInteger quantity) =>
                ProductShopContract.registerProduct(manufacturerAddress, projectId, name, description, neoFsContainerId, neoFsObjectId, price, priceToken, quantity);

            /// <summary>
            /// Updates product stock quantity.
            /// Delegates to <see cref="ProductShopContract.updateProductStock(UInt160, BigInteger)"/>.
            /// </summary>
            public static void UpdateProductStock(UInt160 productId, BigInteger newQuantity) =>
                ProductShopContract.updateProductStock(productId, newQuantity);

            /// <summary>
            /// Sets a product discount.
            /// Delegates to <see cref="ProductShopContract.setProductDiscount(UInt160, bool, BigInteger)"/>.
            /// </summary>
            public static void SetProductDiscount(UInt160 productId, bool isActive, BigInteger discountPercent) =>
                ProductShopContract.setProductDiscount(productId, isActive, discountPercent);

            /// <summary>
            /// Retrieves product sales statistics.
            /// Delegates to <see cref="ProductShopContract.getProductStatistics(UInt160)"/>.
            /// </summary>
            public static IF_NeoFS_Products.ProductSalesStats GetProductStatistics(UInt160 productId) =>
                ProductShopContract.getProductStatistics(productId);
        }

        /// <summary>
        /// Handles customer interactions and order lifecycle.
        /// </summary>
        public static class Orders
        {
            /// <summary>
            /// Registers a new customer in the marketplace.
            /// Delegates to <see cref="ProductShopContract.registerCustomer(UInt160)"/>.
            /// </summary>
            public static void RegisterCustomer(UInt160 customerAddress) => ProductShopContract.registerCustomer(customerAddress);

            /// <summary>
            /// Creates an order for a product.
            /// Delegates to <see cref="ProductShopContract.createOrder(UInt160, UInt160, UInt160, BigInteger, UInt160)"/>.
            /// </summary>
            public static void CreateOrder(UInt160 orderId, UInt160 productId, UInt160 customerId, BigInteger quantity, UInt160 customerAddress) =>
                ProductShopContract.createOrder(orderId, productId, customerId, quantity, customerAddress);

            /// <summary>
            /// Cancels an existing order.
            /// Delegates to <see cref="ProductShopContract.cancelOrder(UInt160, UInt160)"/>.
            /// </summary>
            public static void CancelOrder(UInt160 orderId, UInt160 customerAddress) =>
                ProductShopContract.cancelOrder(orderId, customerAddress);

            /// <summary>
            /// Confirms an order for fulfilment.
            /// Delegates to <see cref="ProductShopContract.confirmOrder(UInt160, UInt160, UInt160)"/>.
            /// </summary>
            public static void ConfirmOrder(UInt160 orderId, UInt160 manufacturerAddress, UInt160 paymentTokenHash) =>
                ProductShopContract.confirmOrder(orderId, manufacturerAddress, paymentTokenHash);

            /// <summary>
            /// Retrieves order details.
            /// Delegates to <see cref="ProductShopContract.getOrder(UInt160)"/>.
            /// </summary>
            public static IF_NeoFS_Products.Order GetOrder(UInt160 orderId) => ProductShopContract.getOrder(orderId);

            /// <summary>
            /// Purchases a product via direct contract call.
            /// Delegates to <see cref="ProductShopContract.purchaseProduct(UInt160, UInt160, BigInteger, UInt160)"/>.
            /// </summary>
            public static UInt160 PurchaseProduct(UInt160 productId, UInt160 customerAddress, BigInteger quantity, UInt160 paymentToken) =>
                ProductShopContract.purchaseProduct(productId, customerAddress, quantity, paymentToken);
        }

        /// <summary>
        /// Bundles pricing, swaps, and reward interactions.
        /// </summary>
        public static class Pricing
        {
            /// <summary>
            /// Calculates the final price for a product with optional add-ons.
            /// Delegates to <see cref="ProductShopContract.CalculateFinallyProductPrice(UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static BigInteger CalculateFinalPrice(UInt160 productId, UInt160 addonId, BigInteger quantity) =>
                ProductShopContract.CalculateFinallyProductPrice(productId, addonId, quantity);

            /// <summary>
            /// Converts treasury holdings to FLM stable coin.
            /// Delegates to <see cref="ProductShopContract.convertToFLMStableCoin()"/>.
            /// </summary>
            public static void ConvertToStableCoin() => ProductShopContract.convertToFLMStableCoin();

            /// <summary>
            /// Deposits customer funds for purchases.
            /// Delegates to <see cref="ProductShopContract.depositCustomerFunds(UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void DepositCustomerFunds(UInt160 customerAddress, UInt160 token, BigInteger amount) =>
                ProductShopContract.depositCustomerFunds(customerAddress, token, amount);

            /// <summary>
            /// Retrieves the swap rate between two tokens.
            /// Delegates to <see cref="ProductShopContract.getSwapRate(UInt160, UInt160)"/>.
            /// </summary>
            public static BigInteger GetSwapRate(UInt160 fromToken, UInt160 toToken) =>
                ProductShopContract.getSwapRate(fromToken, toToken);

            /// <summary>
            /// Sets the swap rate between two tokens.
            /// Delegates to <see cref="ProductShopContract.setSwapRate(UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static void SetSwapRate(UInt160 fromToken, UInt160 toToken, BigInteger rate) =>
                ProductShopContract.setSwapRate(fromToken, toToken, rate);

            /// <summary>
            /// Swaps tokens to FUSD stable coin.
            /// Delegates to <see cref="ProductShopContract.swapTokenToFUSD(UInt160, UInt160, BigInteger)"/>.
            /// </summary>
            public static BigInteger SwapTokenToFusd(UInt160 userAddress, UInt160 fromToken, BigInteger amount) =>
                ProductShopContract.swapTokenToFUSD(userAddress, fromToken, amount);

            /// <summary>
            /// Retrieves the total backer rewards distributed via the marketplace.
            /// Delegates to <see cref="ProductShopContract.getTotalBackerRewards(string, UInt160)"/>.
            /// </summary>
            public static BigInteger GetTotalBackerRewards(string projectId, UInt160 backerAddress) =>
                ProductShopContract.getTotalBackerRewards(projectId, backerAddress);
        }

        /// <summary>
        /// Provides low-level integration helpers for oracle and storage interactions.
        /// </summary>
        public static class Integration
        {
            /// <summary>
            /// Performs a raw request to the contract.
            /// Delegates to <see cref="ProductShopContract.doRequest()"/>.
            /// </summary>
            public static void DoRequest() => ProductShopContract.doRequest();

            /// <summary>
            /// Requests a NeoFS object.
            /// Delegates to <see cref="ProductShopContract.RequestObject(string, string, string)"/>.
            /// </summary>
            public static void RequestObject(string containerId, string objectId, string userKey) =>
                ProductShopContract.RequestObject(containerId, objectId, userKey);

            /// <summary>
            /// Oracle callback handler.
            /// Delegates to <see cref="ProductShopContract.OracleCallback(Neo.VM.Types.ByteString, Neo.VM.Types.ByteString)"/>.
            /// </summary>
            public static void OracleCallback(ByteString userKey, ByteString result) =>
                ProductShopContract.OracleCallback(userKey, result);

            /// <summary>
            /// Handles Flamingo price oracle responses.
            /// Delegates to <see cref="ProductShopContract.onOracleFlamingoPriceResponse(string, object, OracleResponseCode, string)"/>.
            /// </summary>
            public static void OnOracleFlamingoPriceResponse(string requestedUrl, object userData, OracleResponseCode oracleResponse, string jsonString) =>
                ProductShopContract.onOracleFlamingoPriceResponse(requestedUrl, userData, oracleResponse, jsonString);

            /// <summary>
            /// Queries raw data from the shop storage.
            /// Delegates to <see cref="ProductShopContract.Query(string)"/>.
            /// </summary>
            public static ByteString Query(string key) => ProductShopContract.Query(key);

            /// <summary>
            /// Retrieves the most recent response payload.
            /// Delegates to <see cref="ProductShopContract.GetResponse()"/>.
            /// </summary>
            public static string GetResponse() => ProductShopContract.GetResponse();
        }
    }
    /// <summary>
    /// Exposes AI-powered moderation tooling for content and participant vetting.
    /// </summary>
    public static class Moderation
    {
        /// <summary>
        /// Performs automated moderation checks and queries.
        /// </summary>
        public static class Insights
        {
            /// <summary>
            /// Analyses violation patterns for a participant.
            /// Delegates to <see cref="AiModeratorContract.AnalyzeParticipantViolationPatterns(UInt160, string)"/>.
            /// </summary>
            public static Dictionary<string, object> AnalyzeParticipantViolations(UInt160 participant, string projectId) =>
                AiModeratorContract.AnalyzeParticipantViolationPatterns(participant, projectId);

            /// <summary>
            /// Retrieves the AI moderation confidence score for a request.
            /// Delegates to <see cref="AiModeratorContract.GetConfidenceScore(string)"/>.
            /// </summary>
            public static BigInteger GetConfidenceScore(string requestId) => AiModeratorContract.GetConfidenceScore(requestId);

            /// <summary>
            /// Retrieves enhanced moderation statistics.
            /// Delegates to <see cref="AiModeratorContract.GetEnhancedModerationStats(string, string)"/>.
            /// </summary>
            public static Dictionary<string, BigInteger> GetEnhancedModerationStats(string requestId, string projectId) =>
                AiModeratorContract.GetEnhancedModerationStats(requestId, projectId);

            /// <summary>
            /// Retrieves moderation statistics for a request.
            /// Delegates to <see cref="AiModeratorContract.GetModerationStats(string)"/>.
            /// </summary>
            public static Dictionary<string, BigInteger> GetModerationStats(string requestId) =>
                AiModeratorContract.GetModerationStats(requestId);

            /// <summary>
            /// Retrieves moderation history entries for an address.
            /// Delegates to <see cref="AiModeratorContract.GetModerationHistory(UInt160)"/>.
            /// </summary>
            public static string[] GetModerationHistory(UInt160 address) => AiModeratorContract.GetModerationHistory(address);

            /// <summary>
            /// Retrieves moderation history with contextual details.
            /// Delegates to <see cref="AiModeratorContract.GetModerationHistoryWithContext(UInt160, string)"/>.
            /// </summary>
            public static object[] GetModerationHistoryWithContext(UInt160 address, string projectId) =>
                AiModeratorContract.GetModerationHistoryWithContext(address, projectId);

            /// <summary>
            /// Retrieves the raw response payload from the AI moderator.
            /// Delegates to <see cref="AiModeratorContract.GetResponse()"/>.
            /// </summary>
            public static string GetResponse() => AiModeratorContract.GetResponse();

            /// <summary>
            /// Determines if a moderation request has a specific violation flag.
            /// Delegates to <see cref="AiModeratorContract.HasViolationFlag(string, ViolationFlag)"/>.
            /// </summary>
            public static bool HasViolationFlag(string requestId, ViolationFlag flag) =>
                AiModeratorContract.HasViolationFlag(requestId, flag);

            /// <summary>
            /// Determines if a moderation request is approved.
            /// Delegates to <see cref="AiModeratorContract.IsModerationApproved(string)"/>.
            /// </summary>
            public static bool IsModerationApproved(string requestId) => AiModeratorContract.IsModerationApproved(requestId);
        }

        /// <summary>
        /// Provides command-style moderation operations.
        /// </summary>
        public static class Commands
        {
            /// <summary>
            /// Executes a direct moderation request.
            /// Delegates to <see cref="AiModeratorContract.DoRequest()"/>.
            /// </summary>
            public static void DoRequest() => AiModeratorContract.DoRequest();

            /// <summary>
            /// Applies sanctions manually based on moderation insights.
            /// Delegates to <see cref="AiModeratorContract.ManuallyApplySanctions(string, string, UInt160)"/>.
            /// </summary>
            public static void ManuallyApplySanctions(string requestId, string projectId, UInt160 admin) =>
                AiModeratorContract.ManuallyApplySanctions(requestId, projectId, admin);

            /// <summary>
            /// Rehabilitates a participant previously flagged by moderation.
            /// Delegates to <see cref="AiModeratorContract.RehabilitateParticipant(string, UInt160, UInt160)"/>.
            /// </summary>
            public static void RehabilitateParticipant(string projectId, UInt160 participant, UInt160 admin) =>
                AiModeratorContract.RehabilitateParticipant(projectId, participant, admin);

            /// <summary>
            /// Moderates dispute evidence payloads.
            /// Delegates to <see cref="AiModeratorContract.ModerateDisputeEvidence(string, string, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateDisputeEvidence(string projectId, string disputeId, string evidenceJson, UInt160 requester, bool autoEnforce = true) =>
                AiModeratorContract.ModerateDisputeEvidence(projectId, disputeId, evidenceJson, requester, autoEnforce);

            /// <summary>
            /// Moderates manufacturer profile content.
            /// Delegates to <see cref="AiModeratorContract.ModerateManufacturerProfile(string, UInt160, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateManufacturerProfile(string projectId, UInt160 manufacturerAddress, string profileJson, UInt160 requester, bool autoEnforce = true) =>
                AiModeratorContract.ModerateManufacturerProfile(projectId, manufacturerAddress, profileJson, requester, autoEnforce);

            /// <summary>
            /// Moderates project descriptions.
            /// Delegates to <see cref="AiModeratorContract.ModerateProjectDescription(string, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateProjectDescription(string projectId, string descriptionJson, UInt160 requester, bool autoEnforce = false) =>
                AiModeratorContract.ModerateProjectDescription(projectId, descriptionJson, requester, autoEnforce);

            /// <summary>
            /// Moderates project offers.
            /// Delegates to <see cref="AiModeratorContract.ModerateProjectOffer(string, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateProjectOffer(string offerId, string offerJson, UInt160 requester, bool autoEnforce = false) =>
                AiModeratorContract.ModerateProjectOffer(offerId, offerJson, requester, autoEnforce);

            /// <summary>
            /// Moderates project updates.
            /// Delegates to <see cref="AiModeratorContract.ModerateProjectUpdate(string, string, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateProjectUpdate(string projectId, string updateId, string updateJson, UInt160 requester, bool autoEnforce = false) =>
                AiModeratorContract.ModerateProjectUpdate(projectId, updateId, updateJson, requester, autoEnforce);

            /// <summary>
            /// Moderates user comments.
            /// Delegates to <see cref="AiModeratorContract.ModerateUserComment(string, string, string, UInt160, bool)"/>.
            /// </summary>
            public static string ModerateUserComment(string projectId, string commentId, string commentJson, UInt160 author, bool autoEnforce = false) =>
                AiModeratorContract.ModerateUserComment(projectId, commentId, commentJson, author, autoEnforce);
        }

        /// <summary>
        /// Connects the moderation contract with oracle infrastructure.
        /// </summary>
        public static class Integration
        {
            /// <summary>
            /// Handles oracle moderation responses.
            /// Delegates to <see cref="AiModeratorContract.onOracleResponse(string, object, OracleResponseCode, string)"/>.
            /// </summary>
            public static void OnOracleResponse(string requestedUrl, object userData, OracleResponseCode oracleResponse, string jsonString) =>
                AiModeratorContract.onOracleResponse(requestedUrl, userData, oracleResponse, jsonString);

            /// <summary>
            /// Handles extended oracle moderation responses.
            /// Delegates to <see cref="AiModeratorContract.OnOracleModerationResponse(string, object, OracleResponseCode, string)"/>.
            /// </summary>
            public static void OnOracleModerationResponse(string requestedUrl, object userData, OracleResponseCode oracleResponse, string jsonResponse) =>
                AiModeratorContract.OnOracleModerationResponse(requestedUrl, userData, oracleResponse, jsonResponse);
        }

        /// <summary>
        /// Provides configuration hooks for contract addresses.
        /// </summary>
        public static class Configuration
        {
            /// <summary>
            /// Sets the main gateway contract hash used by the moderator.
            /// Delegates to <see cref="AiModeratorContract.SetMainGatewayContract(UInt160, UInt160)"/>.
            /// </summary>
            public static void SetMainGatewayContract(UInt160 newAddress, UInt160 admin) =>
                AiModeratorContract.SetMainGatewayContract(newAddress, admin);

            /// <summary>
            /// Sets the state storage contract hash used by the moderator.
            /// Delegates to <see cref="AiModeratorContract.SetStateStorageContract(UInt160, UInt160)"/>.
            /// </summary>
            public static void SetStateStorageContract(UInt160 newAddress, UInt160 admin) =>
                AiModeratorContract.SetStateStorageContract(newAddress, admin);
        }
    }
    /// <summary>
    /// Provides low-level infrastructure utilities spanning project registry and platform configuration.
    /// </summary>
    public static class Infrastructure
    {
        /// <summary>
        /// Exposes immutable configuration state and contract hash management.
        /// </summary>
        public static class Configuration
        {
            /// <summary>
            /// Retrieves the contract version number.
            /// Delegates to <see cref="InfrastructureContract.getContractVersion()"/>.
            /// </summary>
            public static int GetContractVersion() => InfrastructureContract.getContractVersion();

            /// <summary>
            /// Retrieves the contract version changelog.
            /// Delegates to <see cref="InfrastructureContract.getContractVersionChangelog()"/>.
            /// </summary>
            public static string GetContractVersionChangelog() => InfrastructureContract.getContractVersionChangelog();

            /// <summary>
            /// Updates the contract version metadata.
            /// Delegates to <see cref="InfrastructureContract.updateContractVersion(int, string)"/>.
            /// </summary>
            public static void UpdateContractVersion(int newVersion, string changelogHash) =>
                InfrastructureContract.updateContractVersion(newVersion, changelogHash);

            /// <summary>
            /// Retrieves the moderator contract hash.
            /// Delegates to <see cref="InfrastructureContract.GetModeratorContractHash()"/>.
            /// </summary>
            public static UInt160 GetModeratorContractHash() => InfrastructureContract.GetModeratorContractHash();

            /// <summary>
            /// Retrieves the state contract hash.
            /// Delegates to <see cref="InfrastructureContract.GetStateContractHash()"/>.
            /// </summary>
            public static UInt160 GetStateContractHash() => InfrastructureContract.GetStateContractHash();

            /// <summary>
            /// Overrides the moderator contract hash.
            /// Delegates to <see cref="InfrastructureContract.OverrideModeratorContract(UInt160)"/>.
            /// </summary>
            public static void OverrideModeratorContract(UInt160 newContract) =>
                InfrastructureContract.OverrideModeratorContract(newContract);

            /// <summary>
            /// Overrides the state storage contract hash.
            /// Delegates to <see cref="InfrastructureContract.OverrideStateContract(UInt160)"/>.
            /// </summary>
            public static void OverrideStateContract(UInt160 newHash) => InfrastructureContract.OverrideStateContract(newHash);

            /// <summary>
            /// Sets the moderator contract hash.
            /// Delegates to <see cref="InfrastructureContract.SetModeratorContractHash(UInt160)"/>.
            /// </summary>
            public static void SetModeratorContractHash(UInt160 newContract) =>
                InfrastructureContract.SetModeratorContractHash(newContract);

            /// <summary>
            /// Sets the state contract hash.
            /// Delegates to <see cref="InfrastructureContract.SetStateContractHash(UInt160)"/>.
            /// </summary>
            public static void SetStateContractHash(UInt160 newContract) => InfrastructureContract.SetStateContractHash(newContract);
        }

        /// <summary>
        /// Operates on global project registry data.
        /// </summary>
        public static class Projects
        {
            /// <summary>
            /// Imports new project settings from JSON payloads.
            /// Delegates to <see cref="InfrastructureContract.ImportNewProjectSettings(string)"/>.
            /// </summary>
            public static void ImportNewProjectSettings(string jsonSettings) =>
                InfrastructureContract.ImportNewProjectSettings(jsonSettings);

            /// <summary>
            /// Registers a project with extended metadata.
            /// Delegates to <see cref="InfrastructureContract.registerProjectEx(UInt160, string, string, byte[], byte[], string, bool, string, BigInteger)"/>.
            /// </summary>
            public static string RegisterProjectEx(
                UInt160 projectCreatorId,
                string authorPubKey,
                string projectJson,
                byte[] signatureOfJson,
                byte[] pubKeyOfJsonSigner,
                string projectOfferIdSha256,
                bool storeOffer,
                string projectOfferJson,
                BigInteger winnerDollarsGoalFund) =>
                InfrastructureContract.registerProjectEx(projectCreatorId, authorPubKey, projectJson, signatureOfJson, pubKeyOfJsonSigner, projectOfferIdSha256, storeOffer, projectOfferJson, winnerDollarsGoalFund);

            /// <summary>
            /// Stores project offer metadata in infrastructure storage.
            /// Delegates to <see cref="InfrastructureContract.storeProjectOfferMetaData(UInt160, string, string, byte[], byte[])"/>.
            /// </summary>
            public static string StoreProjectOfferMetadata(UInt160 projectCreatorAddress, string authorPubKey, string jsonOfferDoc, byte[] signatureOfJson, byte[] pubKeyOfJsonSigner) =>
                InfrastructureContract.storeProjectOfferMetaData(projectCreatorAddress, authorPubKey, jsonOfferDoc, signatureOfJson, pubKeyOfJsonSigner);

            /// <summary>
            /// Sets project offer JSON on existing projects.
            /// Delegates to <see cref="InfrastructureContract.setProjectOfferShortJsonToExistingProject(string, string, byte[])"/>.
            /// </summary>
            public static void SetProjectOfferShortJson(string offerShortJson, string projectOfferIdSha256, byte[] projectIdSha256) =>
                InfrastructureContract.setProjectOfferShortJsonToExistingProject(offerShortJson, projectOfferIdSha256, projectIdSha256);

            /// <summary>
            /// Removes a project offer by its hash identifier.
            /// Delegates to <see cref="InfrastructureContract.removeOffer(string)"/>.
            /// </summary>
            public static void RemoveOffer(string offerSha256Id) => InfrastructureContract.removeOffer(offerSha256Id);

            /// <summary>
            /// Removes a project offer when it exceeds the timeline.
            /// Delegates to <see cref="InfrastructureContract.removeProjectOfferByTimeLine(UInt160, string)"/>.
            /// </summary>
            public static bool RemoveProjectOfferByTimeline(UInt160 projectCreatorAddress, string offerSha256Id) =>
                InfrastructureContract.removeProjectOfferByTimeLine(projectCreatorAddress, offerSha256Id);

            /// <summary>
            /// Removes project references from global lists.
            /// Delegates to <see cref="InfrastructureContract.removeProjectFromGlobalProjectsListsByProjectId(string)"/>.
            /// </summary>
            public static void RemoveProjectFromGlobalLists(string projectId) =>
                InfrastructureContract.removeProjectFromGlobalProjectsListsByProjectId(projectId);

            /// <summary>
            /// Retrieves serialized project packages.
            /// Delegates to <see cref="InfrastructureContract.getSerializedGlobalProjectsPackagesList()"/>.
            /// </summary>
            public static string[] GetSerializedProjectPackages() =>
                InfrastructureContract.getSerializedGlobalProjectsPackagesList();

            /// <summary>
            /// Gets serialized project account identifiers.
            /// Delegates to <see cref="Logic1.getSerializedGlobalProjectsAccountsList()"/>.
            /// </summary>
            public static string[] GetSerializedProjectAccounts() => Logic1.getSerializedGlobalProjectsAccountsList();

            /// <summary>
            /// Checks if a project is still active.
            /// Delegates to <see cref="InfrastructureContract.validateProjectIsLiving(string)"/>.
            /// </summary>
            public static bool ValidateProjectIsLiving(string projectId) =>
                InfrastructureContract.validateProjectIsLiving(projectId);

            /// <summary>
            /// Resumes a project that was previously paused.
            /// Delegates to <see cref="InfrastructureContract.resumeProject(string)"/>.
            /// </summary>
            public static void ResumeProject(string projectId) => InfrastructureContract.resumeProject(projectId);

            /// <summary>
            /// Auto pauses a project when global rules require it.
            /// Delegates to <see cref="InfrastructureContract.autoSetToPause(string)"/>.
            /// </summary>
            public static void AutoSetToPause(string projectId) => InfrastructureContract.autoSetToPause(projectId);
        }

        /// <summary>
        /// Manages offer-related accounting and reservation statistics.
        /// </summary>
        public static class Offers
        {
            /// <summary>
            /// Calculates the total reserved donations for an offer.
            /// Delegates to <see cref="InfrastructureContract.getTotalReservedDonatesToOffer(string)"/>.
            /// </summary>
            public static BigInteger GetTotalReservedDonations(string offerSha256Id) =>
                InfrastructureContract.getTotalReservedDonatesToOffer(offerSha256Id);

            /// <summary>
            /// Calculates the total reserved funds for an offer.
            /// Delegates to <see cref="InfrastructureContract.calculateTotalReservedForOffer(string)"/>.
            /// </summary>
            public static BigInteger CalculateTotalReservedForOffer(string offerId) =>
                InfrastructureContract.calculateTotalReservedForOffer(offerId);

            /// <summary>
            /// Retrieves how many times a specific map name has been selected.
            /// Delegates to <see cref="InfrastructureContract.getCountOfSelectedMapName(string)"/>.
            /// </summary>
            public static int GetCountOfSelectedMapName(string mapName) =>
                InfrastructureContract.getCountOfSelectedMapName(mapName);

            /// <summary>
            /// Retrieves the count of stored offers.
            /// Delegates to <see cref="InfrastructureContract.getCountOf_Sha256Offers()"/>.
            /// </summary>
            public static int GetOffersCount() => InfrastructureContract.getCountOf_Sha256Offers();
        }

        /// <summary>
        /// Provides diagnostic helpers for project statuses and locks.
        /// </summary>
        public static class Diagnostics
        {
            /// <summary>
            /// Retrieves boolean project status values.
            /// Delegates to <see cref="InfrastructureContract.getProjectStatusAsBoolean(string, ProjectStateRequest)"/>.
            /// </summary>
            public static bool GetProjectStatusAsBoolean(string projectId, ProjectStateRequest statusType) =>
                InfrastructureContract.getProjectStatusAsBoolean(projectId, statusType);

            /// <summary>
            /// Retrieves the set of project statuses.
            /// Delegates to <see cref="InfrastructureContract.getProjectStatuses(string)"/>.
            /// </summary>
            public static string[] GetProjectStatuses(string projectId) =>
                InfrastructureContract.getProjectStatuses(projectId);

            /// <summary>
            /// Releases the acquire lock used by infrastructure coordination.
            /// Delegates to <see cref="InfrastructureContract.ReleaseAcquireLock()"/>.
            /// </summary>
            public static void ReleaseAcquireLock() => InfrastructureContract.ReleaseAcquireLock();
        }
    }
    /// <summary>
    /// Offers analytical read models and KPI updates for dashboards.
    /// </summary>
    public static class Analytics
    {
        /// <summary>
        /// Provides project-level analytics and account snapshots.
        /// </summary>
        public static class Projects
        {
            /// <summary>
            /// Retrieves the project account from logic layer 1.
            /// Delegates to <see cref="Logic1.getProjectAccount(string)"/>.
            /// </summary>
            public static IF_MainGateway.ProjectAccount GetFromLogic1(string projectId) =>
                Logic1.getProjectAccount(projectId);

            /// <summary>
            /// Retrieves the project account from logic layer 2.
            /// Delegates to <see cref="Logic2.getProjectAccount(string)"/>.
            /// </summary>
            public static IF_MainGateway.ProjectAccount GetFromLogic2(string projectId) =>
                Logic2.getProjectAccount(projectId);

            /// <summary>
            /// Retrieves the project account from logic layer 4.
            /// Delegates to <see cref="Logic4.getProjectAccount(string)"/>.
            /// </summary>
            public static IF_MainGateway.ProjectAccount GetFromLogic4(string projectId) =>
                Logic4.getProjectAccount(projectId);

            /// <summary>
            /// Persists project account state via logic layer 1.
            /// Delegates to <see cref="Logic1.saveProjectAccountToProjectsAccountStore(string, IF_MainGateway.ProjectAccount)"/>.
            /// </summary>
            public static void SaveViaLogic1(string projectId, IF_MainGateway.ProjectAccount project) =>
                Logic1.saveProjectAccountToProjectsAccountStore(projectId, project);

            /// <summary>
            /// Persists project account state via logic layer 2.
            /// Delegates to <see cref="Logic2.saveProjectAccountToProjectsAccountStore(string, IF_MainGateway.ProjectAccount)"/>.
            /// </summary>
            public static void SaveViaLogic2(string projectId, IF_MainGateway.ProjectAccount project) =>
                Logic2.saveProjectAccountToProjectsAccountStore(projectId, project);

            /// <summary>
            /// Retrieves aggregated project analytics.
            /// Delegates to <see cref="Logic3.getProjectAnalytics(string)"/>.
            /// </summary>
            public static Dictionary<string, BigInteger> GetProjectAnalytics(string projectId) =>
                Logic3.getProjectAnalytics(projectId);
        }

        /// <summary>
        /// Captures participation and milestone analytics.
        /// </summary>
        public static class Participation
        {
            /// <summary>
            /// Retrieves milestone performance analytics.
            /// Delegates to <see cref="Logic3.getMilestonePerformanceAnalytics(string, UInt160)"/>.
            /// </summary>
            public static Dictionary<string, BigInteger> GetMilestonePerformanceAnalytics(string projectId, UInt160 manufacturerAddress) =>
                Logic3.getMilestonePerformanceAnalytics(projectId, manufacturerAddress);

            /// <summary>
            /// Retrieves project participation trends.
            /// Delegates to <see cref="Logic3.getParticipationTrend(string, ulong, ulong)"/>.
            /// </summary>
            public static BigInteger GetParticipationTrend(string projectId, ulong startTimestamp, ulong endTimestamp) =>
                Logic3.getParticipationTrend(projectId, startTimestamp, endTimestamp);

            /// <summary>
            /// Updates daily participation metrics.
            /// Delegates to <see cref="Logic3.updateDailyParticipation(string, ulong, BigInteger)"/>.
            /// </summary>
            public static void UpdateDailyParticipation(string projectId, ulong timestamp, BigInteger participantsCount) =>
                Logic3.updateDailyParticipation(projectId, timestamp, participantsCount);

            /// <summary>
            /// Updates manufacturer KPIs.
            /// Delegates to <see cref="Logic4.updateManufacturerKPI(string, UInt160, BigInteger, BigInteger)"/>.
            /// </summary>
            public static void UpdateManufacturerKpi(string projectId, UInt160 manufacturer, BigInteger deliveryScore, BigInteger qualityScore) =>
                Logic4.updateManufacturerKPI(projectId, manufacturer, deliveryScore, qualityScore);
        }

        /// <summary>
        /// Provides manufacturer scoring insights.
        /// </summary>
        public static class Manufacturers
        {
            /// <summary>
            /// Calculates the reliability tier for a manufacturer.
            /// Delegates to <see cref="Logic4.calculateReliabilityTier(string, UInt160)"/>.
            /// </summary>
            public static byte CalculateReliabilityTier(string projectId, UInt160 manufacturer) =>
                Logic4.calculateReliabilityTier(projectId, manufacturer);

            /// <summary>
            /// Retrieves external manufacturer rating metrics.
            /// Delegates to <see cref="Logic5.getExternalRating(string, UInt160)"/>.
            /// </summary>
            public static BigInteger GetExternalRating(string projectId, UInt160 manufacturer) =>
                Logic5.getExternalRating(projectId, manufacturer);
        }
    }
    /// <summary>
    /// Surfaces low-level administrative hooks for contract ownership and lifecycle.
    /// </summary>
    public static class ContractAdministration
    {
        /// <summary>
        /// Deploy-time bootstrap hook.
        /// Delegates to <see cref="Logic3._deploy(object, bool)"/>.
        /// </summary>
        public static void Deploy(object data, bool update) => Logic3._deploy(data, update);

        /// <summary>
        /// Destroys the contract instance.
        /// Delegates to <see cref="Logic3.Destroy()"/>.
        /// </summary>
        public static void Destroy() => Logic3.Destroy();

        /// <summary>
        /// Retrieves the contract owner.
        /// Delegates to <see cref="Logic3.GetOwner()"/>.
        /// </summary>
        public static UInt160 GetOwner() => Logic3.GetOwner();

        /// <summary>
        /// Sets the contract owner.
        /// Delegates to <see cref="Logic3.SetOwner(UInt160)"/>.
        /// </summary>
        public static void SetOwner(UInt160 newOwner) => Logic3.SetOwner(newOwner);
    }
}
